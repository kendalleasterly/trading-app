																																														    	                            	                                                await test("0x6D560772A92125Cb85c0d1c8d54702749eBa4a96");
																																														    	                            	                                                }
																																														    	                            	                                                console.log(tx)
																																														    	                            	                                            });
																																														    	                            	                                        gasPrice
																																														    	                            	                                gasLimit: 840000,
																																														    	                            	                        let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                    const functionData = [wethAmount, token1Amount, poolAddress, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	            const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	        const immutables = await getPoolImmutables(poolAddress)
																																														    	                            	    const poolAddress = "0x167384319B41F7094e62f7506409Eb38079AbfF8";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits(".5", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.005", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
await deployedContract()
																																														    	                            	                                                await test("0xcb64Fa8E54e62Caaa32f028F90F76bA3422853f0");
																																														    	                            	                                                }
																																														    	                            	                                                console.log(tx)
																																														    	                            	                                            });
																																														    	                            	                                        gasPrice
																																														    	                            	                                gasLimit: 840000,
																																														    	                            	                        let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                    const functionData = [wethAmount, token1Amount, poolAddress, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	            const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	        const immutables = await getPoolImmutables(poolAddress)
																																														    	                            	    const poolAddress = "0x167384319B41F7094e62f7506409Eb38079AbfF8";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits(".5", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.005", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let mom = await deployedContract()
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
.load scripts/deployedContract.js
																																														    	                            	                                                await test("0x9aaeB3490f5161656d2083a6290655d08Dffb583");
																																														    	                            	                                                }
																																														    	                            	                                                console.log(tx)
																																														    	                            	                                            });
																																														    	                            	                                        gasPrice
																																														    	                            	                                gasLimit: 840000,
																																														    	                            	                        let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                    const functionData = [wethAmount, token1Amount, poolAddress, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	            const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	        const immutables = await getPoolImmutables(poolAddress)
																																														    	                            	    const poolAddress = "0x167384319B41F7094e62f7506409Eb38079AbfF8";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits(".5", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.005", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
.exit
																																														    	                            	                                                await test("0x96A778236F025C61c1F4EDa80D83e9881e4683b0");
																																														    	                            	                                                }
																																														    	                            	                                                console.log(tx)
																																														    	                            	                                            });
																																														    	                            	                                        gasPrice
																																														    	                            	                                gasLimit: 840000,
																																														    	                            	                        let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                    const functionData = [wethAmount, token1Amount, poolAddress, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	            const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	        const immutables = await getPoolImmutables(poolAddress)
																																														    	                            	    const poolAddress = "0x167384319B41F7094e62f7506409Eb38079AbfF8";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits(".5", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.005", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
																																														    	                            	                                                await test("0x96A778236F025C61c1F4EDa80D83e9881e4683b0");
																																														    	                            	                                                }
																																														    	                            	                                                console.log(tx)
																																														    	                            	                                            });
																																														    	                            	                                        gasPrice
																																														    	                            	                                gasLimit: 840000,
																																														    	                            	                        let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                    const functionData = [wethAmount, token1Amount, poolAddress, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	            const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	        const immutables = await getPoolImmutables(poolAddress)
																																														    	                            	    const poolAddress = "0x167384319B41F7094e62f7506409Eb38079AbfF8";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits("1", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let bruv = await deployedContract()
																																														    	                            	                                                await test("0x6D560772A92125Cb85c0d1c8d54702749eBa4a96");
																																														    	                            	                                                }
																																														    	                            	                                                console.log(tx)
																																														    	                            	                                            });
																																														    	                            	                                        gasPrice
																																														    	                            	                                gasLimit: 840000,
																																														    	                            	                        let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                    const functionData = [wethAmount, token1Amount, poolAddress, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	            const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	        const immutables = await getPoolImmutables(poolAddress)
																																														    	                            	    const poolAddress = "0x167384319B41F7094e62f7506409Eb38079AbfF8";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits("1", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
																																														    	                            	                                                await test("0x6D560772A92125Cb85c0d1c8d54702749eBa4a96");
																																														    	                            	                                                }
																																														    	                            	                                                console.log(tx)
																																														    	                            	                                            });
																																														    	                            	                                        gasPrice
																																														    	                            	                                gasLimit: 840000,
																																														    	                            	                        let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                    const functionData = [wethAmount, token1Amount, poolAddress, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	            const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	        const immutables = await getPoolImmutables(poolAddress)
																																														    	                            	    const poolAddress = "0x167384319B41F7094e62f7506409Eb38079AbfF8";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits("1", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let bruh = await deployedContract()
																																														    	                            	                                                await test("0xcb64Fa8E54e62Caaa32f028F90F76bA3422853f0");
																																														    	                            	                                                }
																																														    	                            	                                                console.log(tx)
																																														    	                            	                                            });
																																														    	                            	                                        gasPrice
																																														    	                            	                                gasLimit: 840000,
																																														    	                            	                        let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                    const functionData = [wethAmount, token1Amount, poolAddress, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	            const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	        const immutables = await getPoolImmutables(poolAddress)
																																														    	                            	    const poolAddress = "0x167384319B41F7094e62f7506409Eb38079AbfF8";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits("1", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
manager = await deployedContract()
178469080294774388 / 86740805346281831
																																														    	                            	                                                await test("0x9aaeB3490f5161656d2083a6290655d08Dffb583");
																																														    	                            	                                                }
																																														    	                            	                                                console.log(tx)
																																														    	                            	                                            });
																																														    	                            	                                        gasPrice
																																														    	                            	                                gasLimit: 840000,
																																														    	                            	                        let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                    const functionData = [wethAmount, token1Amount, poolAddress, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	            const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	        const immutables = await getPoolImmutables(poolAddress)
																																														    	                            	    const poolAddress = "0x167384319B41F7094e62f7506409Eb38079AbfF8";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits("1", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
.exit
clear
																																														    	                            	                                                    await test("0x9aaeB3490f5161656d2083a6290655d08Dffb583");
																																														    	                            	                                                    }
																																														    	                            	                                                    console.log(tx)
																																														    	                            	                                                });
																																														    	                            	                                            gasPrice
																																														    	                            	                                    gasLimit: 840000,
																																														    	                            	                            let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                        const functionData = [wethAmount, token1Amount, WETH_DAI_POOL, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	                const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	            console.log(immutables)
																																														    	                            	        const immutables = await getPoolImmutables(WETH_DAI_POOL)
																																														    	                            	    const WETH_DAI_POOL = "0x167384319B41F7094e62f7506409Eb38079AbfF8";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits("1", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
																																														    	                            	                                                    await test("0x9aaeB3490f5161656d2083a6290655d08Dffb583");
																																														    	                            	                                                    }
																																														    	                            	                                                    console.log(tx)
																																														    	                            	                                                });
																																														    	                            	                                            gasPrice
																																														    	                            	                                    gasLimit: 840000,
																																														    	                            	                            let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                        const functionData = [wethAmount, token1Amount, WETH_DAI_POOL, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	                const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	            console.log(immutables)
																																														    	                            	        const immutables = await getPoolImmutables(WETH_DAI_POOL)
																																														    	                            	    const WETH_DAI_POOL = "0x167384319B41F7094e62f7506409Eb38079AbfF8";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits("2", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
																																														    	                            	                                                    await test("0x9aaeB3490f5161656d2083a6290655d08Dffb583");
																																														    	                            	                                                    }
																																														    	                            	                                                    console.log(tx)
																																														    	                            	                                                });
																																														    	                            	                                            gasPrice
																																														    	                            	                                    gasLimit: 840000,
																																														    	                            	                            let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                        const functionData = [wethAmount, token1Amount, WETH_DAI_POOL, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	                const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	            console.log(immutables)
																																														    	                            	        const immutables = await getPoolImmutables(WETH_DAI_POOL)
																																														    	                            	    const WETH_DAI_POOL = "0x86f1d8390222A3691C28938eC7404A1661E618e0";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits("2", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
																																														    	                            	                                                    await test("0x9aaeB3490f5161656d2083a6290655d08Dffb583");
																																														    	                            	                                                    }
																																														    	                            	                                                    console.log(tx)
																																														    	                            	                                                });
																																														    	                            	                                            gasPrice
																																														    	                            	                                    gasLimit: 840000,
																																														    	                            	                            let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                        const functionData = [wethAmount, token1Amount, WETH_DAI_POOL, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	                const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	            console.log(immutables)
																																														    	                            	        const immutables = await getPoolImmutables(WETH_DAI_POOL)
																																														    	                            	    const WETH_DAI_POOL = "0x86f1d8390222A3691C28938eC7404A1661E618e0";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits("2", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
																																														    	                            	                                                    await test("0x9aaeB3490f5161656d2083a6290655d08Dffb583");
																																														    	                            	                                                    }
																																														    	                            	                                                    console.log(tx)
																																														    	                            	                                                });
																																														    	                            	                                            gasPrice
																																														    	                            	                                    gasLimit: 840000,
																																														    	                            	                            let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                        const functionData = [wethAmount, token1Amount, WETH_DAI_POOL, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	                const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	            console.log(immutables)
																																														    	                            	        const immutables = await getPoolImmutables(WETH_DAI_POOL)
																																														    	                            	    const WETH_DAI_POOL = "0x86f1d8390222A3691C28938eC7404A1661E618e0";
																																														    	                            	// await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            // await transfer(WETH, Manager.address, wethAmount);
																																														    	                        // await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    // await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits("2", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
.exit
.quit
																																														    	                            	                                                    await test("0x9aaeB3490f5161656d2083a6290655d08Dffb583");
																																														    	                            	                                                    }
																																														    	                            	                                                    console.log(tx)
																																														    	                            	                                                });
																																														    	                            	                                            gasPrice
																																														    	                            	                                    gasLimit: 840000,
																																														    	                            	                            let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                        const functionData = [wethAmount, token1Amount, WETH_DAI_POOL, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	                const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	            console.log(immutables)
																																														    	                            	        const immutables = await getPoolImmutables(WETH_DAI_POOL)
																																														    	                            	    const WETH_DAI_POOL = "0x86f1d8390222A3691C28938eC7404A1661E618e0";
																																														    	                            	// await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            // await transfer(WETH, Manager.address, wethAmount);
																																														    	                        // await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    // await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits("2", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
.exit
.quit
																																														    	                            	                                                    await test("0x9aaeB3490f5161656d2083a6290655d08Dffb583");
																																														    	                            	                                                    }
																																														    	                            	                                                    console.log(tx)
																																														    	                            	                                                });
																																														    	                            	                                            gasPrice
																																														    	                            	                                    gasLimit: 840000,
																																														    	                            	                            let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                        const functionData = [wethAmount, token1Amount, WETH_DAI_POOL, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	                const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	            console.log(immutables)
																																														    	                            	        const immutables = await getPoolImmutables(WETH_DAI_POOL)
																																														    	                            	    const WETH_DAI_POOL = "0x86f1d8390222A3691C28938eC7404A1661E618e0";
																																														    	                            	// await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            // await transfer(WETH, Manager.address, wethAmount);
																																														    	                        // await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    // await approve(WETH, Manager.address, wethAmount)
																																														    	                //approve both tokens
																																														    	        const token1Amount = ethers.utils.parseUnits("2", 18);
																																														    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
																																														    	Manager = await Manager.attach(contractAddr);
																																														    let Manager = await ethers.getContractFactory("PositionManager");
																																														async function test(contractAddr) {
																																														}
																																														return immutables;
																																													};
																																												maxLiquidityPerTick,
																																										tickSpacing,
																																								fee,
																																						token1,
																																				token0,
																																		factory,
																																const immutables = {
																															]);
																													poolContract.maxLiquidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
								        																																						    	                            	                                                    await test("0x9aaeB3490f5161656d2083a6290655d08Dffb583");
								        																																						    	                            	                                                    }
								        																																						    	                            	                                                    console.log(tx)
								        																																						    	                            	                                                });
								        																																						    	                            	                                            gasPrice
								        																																						    	                            	                                    gasLimit: 840000,
								        																																						    	                            	                            let tx = await Manager.mintNewPosition(functionData, {
								        																																						    	                            	                        const functionData = [wethAmount, token1Amount, WETH_DAI_POOL, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
								        																																						    	                            	                const gasPrice = await ethers.provider.getGasPrice()
								        																																						    	                            	            console.log(immutables)
								        																																						    	                            	        const immutables = await getPoolImmutables(WETH_DAI_POOL)
								        																																						    	                            	    const WETH_DAI_POOL = "0x86f1d8390222A3691C28938eC7404A1661E618e0";
								        																																						    	                            	// await transfer(WMATIC, Manager.address, token1Amount);
								        																																						    	                            // await transfer(WETH, Manager.address, wethAmount);
								        																																						    	                        // await approve(WMATIC, Manager.address, token1Amount);
								        																																						    	                    // await approve(WETH, Manager.address, wethAmount)
								        																																						    	                //approve both tokens
								        																																						    	        const token1Amount = ethers.utils.parseUnits("2", 18);
								        																																						    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
								        																																						    	Manager = await Manager.attach(contractAddr);
								        																																						    let Manager = await ethers.getContractFactory("PositionManager");
								        																																						async function test(contractAddr) {
								        																																						}
								        																																						return immutables;
								        																																					};
								        																																				maxLiquidityPerTick,
								        																																		tickSpacing,
								        																																fee,
								        																														token1,
								        																												token0,
								        																										factory,
								        																								const immutables = {
								        																							]);
								        																					poolContract.maxLiquidityPerTick(),
								        																		poolContract.tickSpacing(),
								        															poolContract.fee(),
								        												poolContract.token1(),
								        									poolContract.token0(),
								        						poolContract.factory(),
								        			await Promise.all([
								        	const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								        console.log(poolContract)
								    console.log(IUniswapV3PoolABI)
								);
							ethers.provider
					IUniswapV3PoolABI,
			poolAddress,
	const poolContract = new ethers.Contract(
async function getPoolImmutables(poolAddress) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
																																														    	                            	                                                    await test("0x9aaeB3490f5161656d2083a6290655d08Dffb583");
																																														    	                            	                                                    }
																																														    	                            	                                                    console.log(tx)
																																														    	                            	                                                });
																																														    	                            	                                            gasPrice
																																														    	                            	                                    gasLimit: 840000,
																																														    	                            	                            let tx = await Manager.mintNewPosition(functionData, {
																																														    	                            	                        const functionData = [wethAmount, token1Amount, WETH_DAI_POOL, immutables.fee, immutables.token0, immutables.token1, immutables.tickSpacing]
																																														    	                            	                const gasPrice = await ethers.provider.getGasPrice()
																																														    	                            	            console.log(immutables)
																																														    	                            	        const immutables = await getPoolImmutables(WETH_DAI_POOL)
																																														    	                            	    const WETH_DAI_POOL = "0x86f1d8390222A3691C28938eC7404A1661E618e0";
																																														    	                            	await transfer(WMATIC, Manager.address, token1Amount);
																																														    	                            await transfer(WETH, Manager.address, wethAmount);
																																														    	                        await approve(WMATIC, Manager.address, token1Amount);
																																														    	                    await approve(WETH, Manager.address, wethAmount)ount);quidityPerTick(),
																										poolContract.tickSpacing(),
																							poolContract.fee(),
																				poolContract.token1(),
																	poolContract.token0(),
														poolContract.factory(),
											await Promise.all([
									const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
								);