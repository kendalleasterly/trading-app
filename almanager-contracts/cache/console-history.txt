																																																																																																																				        	        						                    																	                				await test();
																																																																																																																				        	        						                    																	                				}
																																																																																																																				        	        						                    																	                				// console.log({balance0, balance1})
																																																																																																																				        	        						                    																	                			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						                    																	                		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						                    																	                	// await resetTx.wait(2)
																																																																																																																				        	        						                    																	                // console.log(resetTx)
																																																																																																																				        	        						                    																	            // });
																																																																																																																				        	        						                    																	        //     gasPrice
																																																																																																																				        	        						                    																	    //     gasLimit: 720000,
																																																																																																																				        	        						                    																	// let resetTx = await PositionManager.removeLiquidity(removeData, {
																																																																																																																				        	        						                    																// ]
																																																																																																																				        	        						                    															// 	immutables.token1,
																																																																																																																				        	        						                    														// 	immutables.token0,
																																																																																																																				        	        						                    													// 	"25856900848810",
																																																																																																																				        	        						                    												// 	"96543", 
																																																																																																																				        	        						                    											// const removeData = [
																																																																																																																				        	        						                    										// console.log({balance0, balance1})
																																																																																																																				        	        						                    									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						                    								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						                    						//MARK: remove the liquidity
																																																																																																																				        	        						                    					console.log({balance0, balance1})
																																																																																																																				        	        						                    				balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						                    			balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						                    		await mintTx.wait(1)
																																																																																																																				        	        						                    	console.log(mintTx)
																																																																																																																				        	        						                    });
																																																																																																																				        	        						                gasPrice: gasPrice.mul("2")
																																																																																																																				        	        						        gasLimit: 720000,
																																																																																																																				        	        						let mintTx = await PositionManager.mint(mintData, {
																																																																																																																				        	        					//tell argent to mint
																																																																																																																				        	        				console.log({balance0, balance1})
																																																																																																																				        	        			balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        		balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        	// await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	        // await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																																				        	    // await approve(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	// await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																																				    const wethAmount = balance1.div("2")
																																																																																																																				const usdcAmount = balance0.div("2")
																																																																																																																			//send funds to contract
																																																																																																																		console.log(balance0.div("2"), balance1.div("2"))
																																																																																																																	console.log({balance0, balance1})
																																																																																																																let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																															let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																														let PositionManager = await getContract("PositionManager", "0x9E0AE48fd233D85dbac16ca91b2f1c3072a6368f")
																																																																																																													// let PositionManager = await deployedContract()
																																																																																																												// init contract
																																																																																																											];
																																																																																																										1,
																																																																																																								immutables.tickSpacing,
																																																																																																						immutables.token1,
																																																																																																				immutables.token0,
																																																																																																		immutables.fee,
																																																																																																poolAddress,
																																																																																														0,
																																																																																												0,
																																																																																										const mintData = [
																																																																																									const gasPrice = await ethers.provider.getGasPrice()
																																																																																								const immutables = await getPoolImmutables(poolAddress)
																																																																																							const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																						const signer = await ethers.getSigner()
																																																																																					async function test() {
																																																																																					}
																																																																																					return balance
																																																																																				let balance = await tokenContract.balanceOf(callerAddr)
																																																																																			const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																																		const signer = await ethers.getSigner()
																																																																																async function getBalance(tokenAddr, callerAddr) {
																																																																																}
																																																																																return immutables;
																																																																															};
																																																																														maxLiquidityPerTick,
																																																																												tickSpacing,
																																																																										fee,
																																																																								token1,
																																																																						token0,
																																																																				factory,
																																																																		const immutables = {
																																																																	]);
																																																															poolContract.maxLiquidityPerTick(),
																																																												poolContract.tickSpacing(),
																																																									poolContract.fee(),
																																																						poolContract.token1(),
																																																			poolContract.token0(),
																																																poolContract.factory(),
																																													await Promise.all([
																																											const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																										);
																																									ethers.provider
																																							IUniswapV3PoolABI,
																																					poolAddress,
																																			const poolContract = new ethers.Contract(
																																		async function getPoolImmutables(poolAddress) {
																																		}
																																		return contract;
																																	const contract = await Contract.attach(address);
																																const Contract = await ethers.getContractFactory(name);
																															async function getContract(name, address) {
																															}
																															return interactableContract;
																														const interactableContract = await getContract(name, contract.address);
																													console.log(name, "deployed to:", contract.address);
																												await contract.deployed();
																											);
																										}
																								gasPrice: gasPrice
																					nonce: 1900,
																		WMATIC, {
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
																																																																																																																				        	        						            																	                				await test();
																																																																																																																				        	        						            																	                				}
																																																																																																																				        	        						            																	                				// console.log({balance0, balance1})
																																																																																																																				        	        						            																	                			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            																	                		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            																	                	// await resetTx.wait(2)
																																																																																																																				        	        						            																	                // console.log(resetTx)
																																																																																																																				        	        						            																	            // });
																																																																																																																				        	        						            																	        //     gasPrice
																																																																																																																				        	        						            																	    //     gasLimit: 720000,
																																																																																																																				        	        						            																	// let resetTx = await PositionManager.removeLiquidity(removeData, {
																																																																																																																				        	        						            																// ]
																																																																																																																				        	        						            															// 	immutables.token1,
																																																																																																																				        	        						            														// 	immutables.token0,
																																																																																																																				        	        						            													// 	"25856900848810",
																																																																																																																				        	        						            												// 	"96543", 
																																																																																																																				        	        						            											// const removeData = [
																																																																																																																				        	        						            										// console.log({balance0, balance1})
																																																																																																																				        	        						            									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            						//MARK: remove the liquidity
																																																																																																																				        	        						            					// console.log({balance0, balance1})
																																																																																																																				        	        						            				// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            			// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            		// await mintTx.wait(1)
																																																																																																																				        	        						            	// console.log(mintTx)
																																																																																																																				        	        						            // });
																																																																																																																				        	        						        //     gasPrice
																																																																																																																				        	        						    //     gasLimit: 720000,
																																																																																																																				        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																																				        	        					//tell argent to mint
																																																																																																																				        	        				console.log({balance0, balance1})
																																																																																																																				        	        			balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        		balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        	await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	        await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																																				        	    await approve(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	// await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																																				    const wethAmount = balance1.div("2")
																																																																																																																				const usdcAmount = balance0.div("2")
																																																																																																																			//send funds to contract
																																																																																																																		console.log(balance0.div("2"), balance1.div("2"))
																																																																																																																	console.log({balance0, balance1})
																																																																																																																let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																															let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																														let PositionManager = await getContract("PositionManager", "0x9E0AE48fd233D85dbac16ca91b2f1c3072a6368f")
																																																																																																													// let PositionManager = await deployedContract()
																																																																																																												// init contract
																																																																																																											];
																																																																																																										1,
																																																																																																								immutables.tickSpacing,
																																																																																																						immutables.token1,
																																																																																																				immutables.token0,
																																																																																																		immutables.fee,
																																																																																																poolAddress,
																																																																																														0,
																																																																																												0,
																																																																																										const mintData = [
																																																																																									const gasPrice = await ethers.provider.getGasPrice()
																																																																																								const immutables = await getPoolImmutables(poolAddress)
																																																																																							const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																						const signer = await ethers.getSigner()
																																																																																					async function test() {
																																																																																					}
																																																																																					return balance
																																																																																				let balance = await tokenContract.balanceOf(callerAddr)
																																																																																			const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																																		const signer = await ethers.getSigner()
																																																																																async function getBalance(tokenAddr, callerAddr) {
																																																																																}
																																																																																return immutables;
																																																																															};
																																																																														maxLiquidityPerTick,
																																																																												tickSpacing,
																																																																										fee,
																																																																								token1,
																																																																						token0,
																																																																				factory,
																																																																		const immutables = {
																																																																	]);
																																																															poolContract.maxLiquidityPerTick(),
																																																												poolContract.tickSpacing(),
																																																									poolContract.fee(),
																																																						poolContract.token1(),
																																																			poolContract.token0(),
																																																poolContract.factory(),
																																													await Promise.all([
																																											const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																										);
																																									ethers.provider
																																							IUniswapV3PoolABI,
																																					poolAddress,
																																			const poolContract = new ethers.Contract(
																																		async function getPoolImmutables(poolAddress) {
																																		}
																																		return contract;
																																	const contract = await Contract.attach(address);
																																const Contract = await ethers.getContractFactory(name);
																															async function getContract(name, address) {
																															}
																															return interactableContract;
																														const interactableContract = await getContract(name, contract.address);
																													console.log(name, "deployed to:", contract.address);
																												await contract.deployed();
																											);
																										}
																								gasPrice: gasPrice
																					nonce: 1900,
																		WMATIC, {
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
																																																																																																																				        	        						            																	                				await test();
																																																																																																																				        	        						            																	                				}
																																																																																																																				        	        						            																	                				// console.log({balance0, balance1})
																																																																																																																				        	        						            																	                			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            																	                		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            																	                	// await resetTx.wait(2)
																																																																																																																				        	        						            																	                // console.log(resetTx)
																																																																																																																				        	        						            																	            // });
																																																																																																																				        	        						            																	        //     gasPrice
																																																																																																																				        	        						            																	    //     gasLimit: 720000,
																																																																																																																				        	        						            																	// let resetTx = await PositionManager.removeLiquidity(removeData, {
																																																																																																																				        	        						            																// ]
																																																																																																																				        	        						            															// 	immutables.token1,
																																																																																																																				        	        						            														// 	immutables.token0,
																																																																																																																				        	        						            													// 	"25856900848810",
																																																																																																																				        	        						            												// 	"96543", 
																																																																																																																				        	        						            											// const removeData = [
																																																																																																																				        	        						            										// console.log({balance0, balance1})
																																																																																																																				        	        						            									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            						//MARK: remove the liquidity
																																																																																																																				        	        						            					// console.log({balance0, balance1})
																																																																																																																				        	        						            				// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            			// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            		// await mintTx.wait(1)
																																																																																																																				        	        						            	// console.log(mintTx)
																																																																																																																				        	        						            // });
																																																																																																																				        	        						        //     gasPrice
																																																																																																																				        	        						    //     gasLimit: 720000,
																																																																																																																				        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																																				        	        					//tell argent to mint
																																																																																																																				        	        				console.log({balance0, balance1})
																																																																																																																				        	        			balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        		balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        	// await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	        // await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																																				        	    // await approve(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																																				    const wethAmount = balance1.div("2")
																																																																																																																				const usdcAmount = balance0.div("2")
																																																																																																																			//send funds to contract
																																																																																																																		console.log(balance0.div("2"), balance1.div("2"))
																																																																																																																	console.log({balance0, balance1})
																																																																																																																let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																															let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																														let PositionManager = await getContract("PositionManager", "0x9E0AE48fd233D85dbac16ca91b2f1c3072a6368f")
																																																																																																													// let PositionManager = await deployedContract()
																																																																																																												// init contract
																																																																																																											];
																																																																																																										1,
																																																																																																								immutables.tickSpacing,
																																																																																																						immutables.token1,
																																																																																																				immutables.token0,
																																																																																																		immutables.fee,
																																																																																																poolAddress,
																																																																																														0,
																																																																																												0,
																																																																																										const mintData = [
																																																																																									const gasPrice = await ethers.provider.getGasPrice()
																																																																																								const immutables = await getPoolImmutables(poolAddress)
																																																																																							const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																						const signer = await ethers.getSigner()
																																																																																					async function test() {
																																																																																					}
																																																																																					return balance
																																																																																				let balance = await tokenContract.balanceOf(callerAddr)
																																																																																			const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																																		const signer = await ethers.getSigner()
																																																																																async function getBalance(tokenAddr, callerAddr) {
																																																																																}
																																																																																return immutables;
																																																																															};
																																																																														maxLiquidityPerTick,
																																																																												tickSpacing,
																																																																										fee,
																																																																								token1,
																																																																						token0,
																																																																				factory,
																																																																		const immutables = {
																																																																	]);
																																																															poolContract.maxLiquidityPerTick(),
																																																												poolContract.tickSpacing(),
																																																									poolContract.fee(),
																																																						poolContract.token1(),
																																																			poolContract.token0(),
																																																poolContract.factory(),
																																													await Promise.all([
																																											const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																										);
																																									ethers.provider
																																							IUniswapV3PoolABI,
																																					poolAddress,
																																			const poolContract = new ethers.Contract(
																																		async function getPoolImmutables(poolAddress) {
																																		}
																																		return contract;
																																	const contract = await Contract.attach(address);
																																const Contract = await ethers.getContractFactory(name);
																															async function getContract(name, address) {
																															}
																															return interactableContract;
																														const interactableContract = await getContract(name, contract.address);
																													console.log(name, "deployed to:", contract.address);
																												await contract.deployed();
																											);
																										}
																								gasPrice: gasPrice
																					nonce: 1900,
																		WMATIC, {
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
.exit
																																																																																																																				        	        						            																	                				await test();
																																																																																																																				        	        						            																	                				}
																																																																																																																				        	        						            																	                				// console.log({balance0, balance1})
																																																																																																																				        	        						            																	                			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            																	                		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            																	                	// await resetTx.wait(2)
																																																																																																																				        	        						            																	                // console.log(resetTx)
																																																																																																																				        	        						            																	            // });
																																																																																																																				        	        						            																	        //     gasPrice
																																																																																																																				        	        						            																	    //     gasLimit: 720000,
																																																																																																																				        	        						            																	// let resetTx = await PositionManager.removeLiquidity(removeData, {
																																																																																																																				        	        						            																// ]
																																																																																																																				        	        						            															// 	immutables.token1,
																																																																																																																				        	        						            														// 	immutables.token0,
																																																																																																																				        	        						            													// 	"25856900848810",
																																																																																																																				        	        						            												// 	"96543", 
																																																																																																																				        	        						            											// const removeData = [
																																																																																																																				        	        						            										// console.log({balance0, balance1})
																																																																																																																				        	        						            									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            						//MARK: remove the liquidity
																																																																																																																				        	        						            					// console.log({balance0, balance1})
																																																																																																																				        	        						            				// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            			// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            		// await mintTx.wait(1)
																																																																																																																				        	        						            	// console.log(mintTx)
																																																																																																																				        	        						            // });
																																																																																																																				        	        						        //     gasPrice
																																																																																																																				        	        						    //     gasLimit: 720000,
																																																																																																																				        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																																				        	        					//tell argent to mint
																																																																																																																				        	        				console.log({balance0, balance1})
																																																																																																																				        	        			balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        		balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        	await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	        await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																																				        	    await approve(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																																				    const wethAmount = balance1.div("2")
																																																																																																																				const usdcAmount = balance0.div("2")
																																																																																																																			//send funds to contract
																																																																																																																		console.log(balance0.div("2"), balance1.div("2"))
																																																																																																																	console.log({balance0, balance1})
																																																																																																																let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																															let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																														let PositionManager = await getContract("PositionManager", "0x9E0AE48fd233D85dbac16ca91b2f1c3072a6368f")
																																																																																																													// let PositionManager = await deployedContract()
																																																																																																												// init contract
																																																																																																											];
																																																																																																										1,
																																																																																																								immutables.tickSpacing,
																																																																																																						immutables.token1,
																																																																																																				immutables.token0,
																																																																																																		immutables.fee,
																																																																																																poolAddress,
																																																																																														0,
																																																																																												0,
																																																																																										const mintData = [
																																																																																									const gasPrice = await ethers.provider.getGasPrice()
																																																																																								const immutables = await getPoolImmutables(poolAddress)
																																																																																							const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																						const signer = await ethers.getSigner()
																																																																																					async function test() {
																																																																																					}
																																																																																					return balance
																																																																																				let balance = await tokenContract.balanceOf(callerAddr)
																																																																																			const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																																		const signer = await ethers.getSigner()
																																																																																async function getBalance(tokenAddr, callerAddr) {
																																																																																}
																																																																																return immutables;
																																																																															};
																																																																														maxLiquidityPerTick,
																																																																												tickSpacing,
																																																																										fee,
																																																																								token1,
																																																																						token0,
																																																																				factory,
																																																																		const immutables = {
																																																																	]);
																																																															poolContract.maxLiquidityPerTick(),
																																																												poolContract.tickSpacing(),
																																																									poolContract.fee(),
																																																						poolContract.token1(),
																																																			poolContract.token0(),
																																																poolContract.factory(),
																																													await Promise.all([
																																											const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																										);
																																									ethers.provider
																																							IUniswapV3PoolABI,
																																					poolAddress,
																																			const poolContract = new ethers.Contract(
																																		async function getPoolImmutables(poolAddress) {
																																		}
																																		return contract;
																																	const contract = await Contract.attach(address);
																																const Contract = await ethers.getContractFactory(name);
																															async function getContract(name, address) {
																															}
																															return interactableContract;
																														const interactableContract = await getContract(name, contract.address);
																													console.log(name, "deployed to:", contract.address);
																												await contract.deployed();
																											);
																										}
																								gasPrice: gasPrice
																					nonce: 1900,
																		WMATIC, {
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
await manager.tokenReturn("0x2791bca1f2de4661ed88a30c99a7a9449aa84174", "2774318")
																																																																																																												        	        						            																					                        				await test();
																																																																																																												        	        						            																					                        				}
																																																																																																												        	        						            																					                        				console.log({balance0, balance1})
																																																																																																												        	        						            																					                        			balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																												        	        						            																					                        		balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																												        	        						            																					                        	await resetTx.wait(2)
																																																																																																												        	        						            																					                        console.log(resetTx)
																																																																																																												        	        						            																					                    });
																																																																																																												        	        						            																					                gasPrice
																																																																																																												        	        						            																					        gasLimit: 720000,
																																																																																																												        	        						            																					let resetTx = await PositionManager.removeLiquidity(removeData, {
																																																																																																												        	        						            																				]
																																																																																																												        	        						            																			immutables.token1,
																																																																																																												        	        						            																	immutables.token0,
																																																																																																												        	        						            															"25856900848810",
																																																																																																												        	        						            													"96543", 
																																																																																																												        	        						            											const removeData = [
																																																																																																												        	        						            										console.log({balance0, balance1})
																																																																																																												        	        						            									let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																												        	        						            								let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																												        	        						            						//MARK: remove the liquidity
																																																																																																												        	        						            					// console.log({balance0, balance1})
																																																																																																												        	        						            				// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																												        	        						            			// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																												        	        						            		// await mintTx.wait(1)
																																																																																																												        	        						            	// console.log(mintTx)
																																																																																																												        	        						            // });
																																																																																																												        	        						        //     gasPrice
																																																																																																												        	        						    //     gasLimit: 720000,
																																																																																																												        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																												        	        					// //tell argent to mint
																																																																																																												        	        				// console.log({balance0, balance1})
																																																																																																												        	        			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																												        	        		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																												        	        	// await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																												        	        // await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																												        	    // await approve(WETH, PositionManager.address, wethAmount);
																																																																																																												        	// await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																												    // const wethAmount = balance1.div("2")
																																																																																																												// const usdcAmount = balance0.div("2")
																																																																																																											// //send funds to contract
																																																																																																										// console.log(balance0.div("2"), balance1.div("2"))
																																																																																																									// console.log({balance0, balance1})
																																																																																																								// let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																							// let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																						let PositionManager = await getContract("PositionManager", "0x9E0AE48fd233D85dbac16ca91b2f1c3072a6368f")
																																																																																																					// let PositionManager = await deployedContract()
																																																																																																				// init contract
																																																																																																			// ];
																																																																																																		// 	1,
																																																																																																	// 	immutables.tickSpacing,
																																																																																																// 	immutables.token1,
																																																																																															// 	immutables.token0,
																																																																																														// 	immutables.fee,
																																																																																													// 	poolAddress,
																																																																																												// 	0,
																																																																																											// 	0,
																																																																																										// const mintData = [
																																																																																									const gasPrice = await ethers.provider.getGasPrice()
																																																																																								const immutables = await getPoolImmutables(poolAddress)
																																																																																							const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																						const signer = await ethers.getSigner()
																																																																																					async function test() {
																																																																																					}
																																																																																					return balance
																																																																																				let balance = await tokenContract.balanceOf(callerAddr)
																																																																																			const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																																		const signer = await ethers.getSigner()
																																																																																async function getBalance(tokenAddr, callerAddr) {
																																																																																}
																																																																																return immutables;
																																																																															};
																																																																														maxLiquidityPerTick,
																																																																												tickSpacing,
																																																																										fee,
																																																																								token1,
																																																																						token0,
																																																																				factory,
																																																																		const immutables = {
																																																																	]);
																																																															poolContract.maxLiquidityPerTick(),
																																																												poolContract.tickSpacing(),
																																																									poolContract.fee(),
																																																						poolContract.token1(),
																																																			poolContract.token0(),
																																																poolContract.factory(),
																																													await Promise.all([
																																											const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																										);
																																									ethers.provider
																																							IUniswapV3PoolABI,
																																					poolAddress,
																																			const poolContract = new ethers.Contract(
																																		async function getPoolImmutables(poolAddress) {
																																		}
																																		return contract;
																																	const contract = await Contract.attach(address);
																																const Contract = await ethers.getContractFactory(name);
																															async function getContract(name, address) {
																															}
																															return interactableContract;
																														const interactableContract = await getContract(name, contract.address);
																													console.log(name, "deployed to:", contract.address);
																												await contract.deployed();
																											);
																										}
																								gasPrice: gasPrice
																					nonce: 1900,
																		WMATIC, {
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
																																																																																																												        	        						            																					                        				await test();
																																																																																																												        	        						            																					                        				}
																																																																																																												        	        						            																					                        				console.log({balance0, balance1})
																																																																																																												        	        						            																					                        			balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																												        	        						            																					                        		balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																												        	        						            																					                        	await resetTx.wait(2)
																																																																																																												        	        						            																					                        console.log(resetTx)
																																																																																																												        	        						            																					                    });
																																																																																																												        	        						            																					                gasPrice
																																																																																																												        	        						            																					        gasLimit: 720000,
																																																																																																												        	        						            																					let resetTx = await PositionManager.removeLiquidity(removeData, mintData, {
																																																																																																												        	        						            																				]
																																																																																																												        	        						            																			immutables.token1,
																																																																																																												        	        						            																	immutables.token0,
																																																																																																												        	        						            															"25856900848810",
																																																																																																												        	        						            													"96543", 
																																																																																																												        	        						            											const removeData = [
																																																																																																												        	        						            										console.log({balance0, balance1})
																																																																																																												        	        						            									let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																												        	        						            								let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																												        	        						            						//MARK: remove the liquidity
																																																																																																												        	        						            					// console.log({balance0, balance1})
																																																																																																												        	        						            				// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																												        	        						            			// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																												        	        						            		// await mintTx.wait(1)
																																																																																																												        	        						            	// console.log(mintTx)
																																																																																																												        	        						            // });
																																																																																																												        	        						        //     gasPrice
																																																																																																												        	        						    //     gasLimit: 720000,
																																																																																																												        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																												        	        					// //tell argent to mint
																																																																																																												        	        				// console.log({balance0, balance1})
																																																																																																												        	        			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																												        	        		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																												        	        	// await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																												        	        // await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																												        	    // await approve(WETH, PositionManager.address, wethAmount);
																																																																																																												        	// await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																												    // const wethAmount = balance1.div("2")
																																																																																																												// const usdcAmount = balance0.div("2")
																																																																																																											// //send funds to contract
																																																																																																										// console.log(balance0.div("2"), balance1.div("2"))
																																																																																																									// console.log({balance0, balance1})
																																																																																																								// let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																							// let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																						let PositionManager = await getContract("PositionManager", "0x9E0AE48fd233D85dbac16ca91b2f1c3072a6368f")
																																																																																																					// let PositionManager = await deployedContract()
																																																																																																				// init contract
																																																																																																			// ];
																																																																																																		// 	1,
																																																																																																	// 	immutables.tickSpacing,
																																																																																																// 	immutables.token1,
																																																																																															// 	immutables.token0,
																																																																																														// 	immutables.fee,
																																																																																													// 	poolAddress,
																																																																																												// 	0,
																																																																																											// 	0,
																																																																																										// const mintData = [
																																																																																									const gasPrice = await ethers.provider.getGasPrice()
																																																																																								const immutables = await getPoolImmutables(poolAddress)
																																																																																							const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																						const signer = await ethers.getSigner()
																																																																																					async function test() {
																																																																																					}
																																																																																					return balance
																																																																																				let balance = await tokenContract.balanceOf(callerAddr)
																																																																																			const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																																		const signer = await ethers.getSigner()
																																																																																async function getBalance(tokenAddr, callerAddr) {
																																																																																}
																																																																																return immutables;
																																																																															};
																																																																														maxLiquidityPerTick,
																																																																												tickSpacing,
																																																																										fee,
																																																																								token1,
																																																																						token0,
																																																																				factory,
																																																																		const immutables = {
																																																																	]);
																																																															poolContract.maxLiquidityPerTick(),
																																																												poolContract.tickSpacing(),
																																																									poolContract.fee(),
																																																						poolContract.token1(),
																																																			poolContract.token0(),
																																																poolContract.factory(),
																																													await Promise.all([
																																											const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																										);
																																									ethers.provider
																																							IUniswapV3PoolABI,
																																					poolAddress,
																																			const poolContract = new ethers.Contract(
																																		async function getPoolImmutables(poolAddress) {
																																		}
																																		return contract;
																																	const contract = await Contract.attach(address);
																																const Contract = await ethers.getContractFactory(name);
																															async function getContract(name, address) {
																															}
																															return interactableContract;
																														const interactableContract = await getContract(name, contract.address);
																													console.log(name, "deployed to:", contract.address);
																												await contract.deployed();
																											);
																										}
																								gasPrice: gasPrice
																					nonce: 1900,
																		WMATIC, {
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
await manager.tokenReturn("0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619", "246254049218")
manager.functions
let manager = await getContract("PositionManager", "0x9e0ae48fd233d85dbac16ca91b2f1c3072a6368f")
																																																																																																																			        	        						                    																	                				await test();
																																																																																																																			        	        						                    																	                				}
																																																																																																																			        	        						                    																	                				// console.log({balance0, balance1})
																																																																																																																			        	        						                    																	                			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																			        	        						                    																	                		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																			        	        						                    																	                	// await resetTx.wait(2)
																																																																																																																			        	        						                    																	                // console.log(resetTx)
																																																																																																																			        	        						                    																	            // });
																																																																																																																			        	        						                    																	        //     gasPrice
																																																																																																																			        	        						                    																	    //     gasLimit: 720000,
																																																																																																																			        	        						                    																	// let resetTx = await PositionManager.resetPosition(removeData, mintData, {
																																																																																																																			        	        						                    																// ]
																																																																																																																			        	        						                    															// 	immutables.token1,
																																																																																																																			        	        						                    														// 	immutables.token0,
																																																																																																																			        	        						                    													// 	"45822516510733",
																																																																																																																			        	        						                    												// 	"96478", 
																																																																																																																			        	        						                    											// const removeData = [
																																																																																																																			        	        						                    										// console.log({balance0, balance1})
																																																																																																																			        	        						                    									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																			        	        						                    								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																			        	        						                    							// let PositionManager = await getContract("PositionManager", "0x926A2B5d5a8479D1E2f0e7CE0Fb269DcFcAF4628")
																																																																																																																			        	        						                    						//MARK: remove the liquidity
																																																																																																																			        	        						                    					console.log({balance0, balance1})
																																																																																																																			        	        						                    				balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																			        	        						                    			balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																			        	        						                    		await mintTx.wait(1)
																																																																																																																			        	        						                    	console.log(mintTx)
																																																																																																																			        	        						                    });
																																																																																																																			        	        						                gasPrice
																																																																																																																			        	        						        gasLimit: 720000,
																																																																																																																			        	        						let mintTx = await PositionManager.mint(mintData, {
																																																																																																																			        	        					//tell argent to mint
																																																																																																																			        	        				console.log({balance0, balance1})
																																																																																																																			        	        			balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																			        	        		balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																			        	        	await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																																			        	        await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																																			        	    await approve(WETH, PositionManager.address, wethAmount);
																																																																																																																			        	await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																																			    const wethAmount = balance1.div("20")
																																																																																																																			const usdcAmount = balance0.div("20")
																																																																																																																		//send funds to contract
																																																																																																																	console.log(balance0.div("20"), balance1.div("20"))
																																																																																																																console.log({balance0, balance1})
																																																																																																															let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																														let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																													let PositionManager = await deployedContract()
																																																																																																												// init contract
																																																																																																											];
																																																																																																										1,
																																																																																																								immutables.tickSpacing,
																																																																																																						immutables.token1,
																																																																																																				immutables.token0,
																																																																																																		immutables.fee,
																																																																																																poolAddress,
																																																																																														0,
																																																																																												0,
																																																																																										const mintData = [
																																																																																									const gasPrice = await ethers.provider.getGasPrice()
																																																																																								const immutables = await getPoolImmutables(poolAddress)
																																																																																							const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																						const signer = await ethers.getSigner()
																																																																																					async function test() {
																																																																																					}
																																																																																					return balance
																																																																																				let balance = await tokenContract.balanceOf(callerAddr)
																																																																																			const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																																		const signer = await ethers.getSigner()
																																																																																async function getBalance(tokenAddr, callerAddr) {
																																																																																}
																																																																																return immutables;
																																																																															};
																																																																														maxLiquidityPerTick,
																																																																												tickSpacing,
																																																																										fee,
																																																																								token1,
																																																																						token0,
																																																																				factory,
																																																																		const immutables = {
																																																																	]);
																																																															poolContract.maxLiquidityPerTick(),
																																																												poolContract.tickSpacing(),
																																																									poolContract.fee(),
																																																						poolContract.token1(),
																																																			poolContract.token0(),
																																																poolContract.factory(),
																																													await Promise.all([
																																											const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																										);
																																									ethers.provider
																																							IUniswapV3PoolABI,
																																					poolAddress,
																																			const poolContract = new ethers.Contract(
																																		async function getPoolImmutables(poolAddress) {
																																		}
																																		return contract;
																																	const contract = await Contract.attach(address);
																																const Contract = await ethers.getContractFactory(name);
																															async function getContract(name, address) {
																															}
																															return interactableContract;
																														const interactableContract = await getContract(name, contract.address);
																													console.log(name, "deployed to:", contract.address);
																												await contract.deployed();
																											);
																										}
																								gasPrice: gasPrice
																					nonce: 1900,
																		WMATIC, {
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
																																																																																																										        	        						                    																	                				await test();
																																																																																																										        	        						                    																	                				}
																																																																																																										        	        						                    																	                				// console.log({balance0, balance1})
																																																																																																										        	        						                    																	                			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																										        	        						                    																	                		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																										        	        						                    																	                	// await resetTx.wait(2)
																																																																																																										        	        						                    																	                // console.log(resetTx)
																																																																																																										        	        						                    																	            // });
																																																																																																										        	        						                    																	        //     gasPrice
																																																																																																										        	        						                    																	    //     gasLimit: 720000,
																																																																																																										        	        						                    																	// let resetTx = await PositionManager.resetPosition(removeData, mintData, {
																																																																																																										        	        						                    																// ]
																																																																																																										        	        						                    															// 	immutables.token1,
																																																																																																										        	        						                    														// 	immutables.token0,
																																																																																																										        	        						                    													// 	"45822516510733",
																																																																																																										        	        						                    												// 	"96478", 
																																																																																																										        	        						                    											// const removeData = [
																																																																																																										        	        						                    										// console.log({balance0, balance1})
																																																																																																										        	        						                    									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																										        	        						                    								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																										        	        						                    							// let PositionManager = await getContract("PositionManager", "0x926A2B5d5a8479D1E2f0e7CE0Fb269DcFcAF4628")
																																																																																																										        	        						                    						//MARK: remove the liquidity
																																																																																																										        	        						                    					console.log({balance0, balance1})
																																																																																																										        	        						                    				balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																										        	        						                    			balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																										        	        						                    		await mintTx.wait(1)
																																																																																																										        	        						                    	console.log(mintTx)
																																																																																																										        	        						                    });
																																																																																																										        	        						                gasPrice
																																																																																																										        	        						        gasLimit: 720000,
																																																																																																										        	        						let mintTx = await PositionManager.mint(mintData, {
																																																																																																										        	        					//tell argent to mint
																																																																																																										        	        				console.log({balance0, balance1})
																																																																																																										        	        			balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																										        	        		balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																										        	        	await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																										        	        await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																										        	    await approve(WETH, PositionManager.address, wethAmount);
																																																																																																										        	await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																										    const wethAmount = balance1.div("20")
																																																																																																										const usdcAmount = balance0.div("20")
																																																																																																									//send funds to contract
																																																																																																								console.log(balance0.div("20"), balance1.div("20"))
																																																																																																							console.log({balance0, balance1})
																																																																																																						let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																					let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																				let PositionManager = await deployedContract()
																																																																																																			// init contract
																																																																																																		];
																																																																																																	1,
																																																																																															immutables.tickSpacing,
																																																																																													immutables.token1,
																																																																																											immutables.token0,
																																																																																									immutables.fee,
																																																																																							poolAddress,
																																																																																					0,
																																																																																			0,
																																																																																	const mintData = [
																																																																																const gasPrice = await ethers.provider.getGasPrice()
																																																																															const immutables = await getPoolImmutables(poolAddress)
																																																																														const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																													const signer = await ethers.getSigner()
																																																																												async function test() {
																																																																												}
																																																																												return balance
																																																																											let balance = await tokenContract.balanceOf(callerAddr)
																																																																										const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																									const signer = await ethers.getSigner()
																																																																							async function getBalance(tokenAddr, callerAddr) {
																																																																							}
																																																																							return immutables;
																																																																						};
																																																																					maxLiquidityPerTick,
																																																																			tickSpacing,
																																																																	fee,
																																																															token1,
																																																													token0,
																																																											factory,
																																																									const immutables = {
																																																								]);
																																																						poolContract.maxLiquidityPerTick(),
																																																			poolContract.tickSpacing(),
																																																poolContract.fee(),
																																													poolContract.token1(),
																																										poolContract.token0(),
																																							poolContract.factory(),
																																				await Promise.all([
																																		const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																	);
																																ethers.provider
																														IUniswapV3PoolABI,
																												poolAddress,
																										const poolContract = new ethers.Contract(
																									async function getPoolImmutables(poolAddress) {
																									}
																									return contract;
																								const contract = await Contract.attach(address);
																							const Contract = await ethers.getContractFactory(name);
																						async function getContract(name, address) {
																						}
																						return interactableContract;
																					const interactableContract = await getContract(name, contract.address);
																				console.log(name, "deployed to:", contract.address);
																			await contract.deployed();
																		);
																	WMATIC
															factory,
													SwapRouter,
											NonfungiblePositionManager,
									const contract = await Contract.deploy(
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
																																																																																																										        	        						                    																	                				await test();
																																																																																																										        	        						                    																	                				}
																																																																																																										        	        						                    																	                				// console.log({balance0, balance1})
																																																																																																										        	        						                    																	                			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																										        	        						                    																	                		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																										        	        						                    																	                	// await resetTx.wait(2)
																																																																																																										        	        						                    																	                // console.log(resetTx)