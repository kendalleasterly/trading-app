.exit
manager.functions
await manager.refund("0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270", "1700456356036881225", {gasLimit: 210000, gasPrice})
await manager.refund("0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270", "2620000000000000000", {gasLimit: 210000, gasPrice})
gasPrice = await ethers.provider.getGasPrice()
await gasPrice = await ethers.provider.getGasPrice()
await manager.refund("0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270", "2620000000000000000")
manager.functions
let manager = await deployedContract()
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
        	                            	                                                    await test("0xdd55e66629f1e2f4f725b115b371bf059e7d3436");
        	                            	                                                    }
        	                            	                                                    await approve(DAI, Manager.address, daiAmount);
        	                            	                                                await approve(WETH, Manager.address, wethAmount)
        	                            	                                            console.log(tx)
        	                            	                                        });
        	                            	                                    gasPrice
        	                            	                            gasLimit: 840000,
        	                            	                    let tx = await Manager.mintNewPosition(functionData, {
        	                            	                const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                            	            const gasPrice = await ethers.provider.getGasPrice()
        	                            	        //call the function with max values of both（and pool)
        	                            	    const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                            	await transfer(DAI, Manager.address, daiAmount);
        	                            await transfer(WETH, Manager.address, wethAmount);
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																																}
																																return contract;
																															const contract = await Contract.attach(address);
																														const Contract = await ethers.getContractFactory(name);
																													async function getContract(name, address) {
																													}
																													return interactableContract;
																												const interactableContract = await getContract(name, contract.address);
																											})
																										address: contract.address
																								name,
																						tenderly.verify({
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
        	                            	                                                    await test("0x6641752eb82ba265a829fd2fcBdE7933ad1481E5");
        	                            	                                                    }
        	                            	                                                    await approve(DAI, Manager.address, daiAmount);
        	                            	                                                await approve(WETH, Manager.address, wethAmount)
        	                            	                                            console.log(tx)
        	                            	                                        });
        	                            	                                    gasPrice
        	                            	                            gasLimit: 840000,
        	                            	                    let tx = await Manager.mintNewPosition(functionData, {
        	                            	                const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                            	            const gasPrice = await ethers.provider.getGasPrice()
        	                            	        //call the function with max values of both（and pool)
        	                            	    const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                            	await transfer(DAI, Manager.address, daiAmount);
        	                            await transfer(WETH, Manager.address, wethAmount);
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
manager = await deployedContract()
let manager = await deployedContract()
await ethers.provider.getBlockNumber()
        	                            	                                                    await test("0x8CF202Cf18b98c7A20415E9cc7f7c127E091f811");
        	                            	                                                    }
        	                            	                                                    await approve(DAI, Manager.address, daiAmount);
        	                            	                                                await approve(WETH, Manager.address, wethAmount)
        	                            	                                            console.log(tx)
        	                            	                                        });
        	                            	                                    gasPrice
        	                            	                            gasLimit: 840000,
        	                            	                    let tx = await Manager.mintNewPosition(functionData, {
        	                            	                const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                            	            const gasPrice = await ethers.provider.getGasPrice()
        	                            	        //call the function with max values of both（and pool)
        	                            	    const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                            	await transfer(DAI, Manager.address, daiAmount);
        	                            await transfer(WETH, Manager.address, wethAmount);
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																																}
																																return contract;
																															const contract = await Contract.attach(address);
																														const Contract = await ethers.getContractFactory(name);
																													async function getContract(name, address) {
																													}
																													return interactableContract;
																												const interactableContract = await getContract(name, contract.address);
																											})
																										address: contract.address
																								name,
																						tenderly.verify({
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
.exit
        	                            	                                                    await test("0xf85A951858c2032b0abc05F0bDfbb64AC8DD0925");
        	                            	                                                    }
        	                            	                                                    await approve(DAI, Manager.address, daiAmount);
        	                            	                                                await approve(WETH, Manager.address, wethAmount)
        	                            	                                            console.log(tx)
        	                            	                                        });
        	                            	                                    gasPrice
        	                            	                            gasLimit: 840000,
        	                            	                    let tx = await Manager.mintNewPosition(functionData, {
        	                            	                const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                            	            const gasPrice = await ethers.provider.getGasPrice()
        	                            	        //call the function with max values of both（and pool)
        	                            	    const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                            	await transfer(DAI, Manager.address, daiAmount);
        	                            await transfer(WETH, Manager.address, wethAmount);
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
let manager = awati deployedContract()
																																}
																																return contract;
																															const contract = await Contract.attach(address);
																														const Contract = await ethers.getContractFactory(name);
																													async function getContract(name, address) {
																													}
																													return interactableContract;
																												const interactableContract = await getContract(name, contract.address);
																											})
																										address: contract.address
																								name,
																						tenderly.verify({
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
        	                            	                                                    await test("0x23c8fFAe371ce27cea640E328AdCa48E79898b71");
        	                            	                                                    }
        	                            	                                                    await approve(DAI, Manager.address, daiAmount);
        	                            	                                                await approve(WETH, Manager.address, wethAmount)
        	                            	                                            console.log(tx)
        	                            	                                        });
        	                            	                                    gasPrice
        	                            	                            gasLimit: 840000,
        	                            	                    let tx = await Manager.mintNewPosition(functionData, {
        	                            	                const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                            	            const gasPrice = await ethers.provider.getGasPrice()
        	                            	        //call the function with max values of both（and pool)
        	                            	    const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                            	await transfer(DAI, Manager.address, daiAmount);
        	                            await transfer(WETH, Manager.address, wethAmount);
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																																}
																																return contract;
																															const contract = await Contract.attach(address);
																														const Contract = await ethers.getContractFactory(name);
																													async function getContract(name, address) {
																													}
																													return interactableContract;
																												const interactableContract = await getContract(name, contract.address);
																											})
																										address: contract.address
																								name,
																						tenderly.verify({
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
.exit
approve(WETH, "0x25CCa0D866E36b00d3a5C07339122123AeF918F1", "1")
        	                            	                                            await test("0x9AdcE0aF2c8A28D189E380fe4E560102D3A6A71F");
        	                            	                                            }
        	                            	                                            console.log(tx)
        	                            	                                        });
        	                            	                                    gasPrice
        	                            	                            gasLimit: 840000,
        	                            	                    let tx = await Manager.mintNewPosition(functionData, {
        	                            	                const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                            	            const gasPrice = await ethers.provider.getGasPrice()
        	                            	        //call the function with max values of both（and pool)
        	                            	    const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                            	await transfer(DAI, Manager.address, daiAmount);
        	                            await transfer(WETH, Manager.address, wethAmount);
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
.exit
        	                            	                                            await test("0x9AdcE0aF2c8A28D189E380fe4E560102D3A6A71F");
        	                            	                                            }
        	                            	                                            console.log(tx)
        	                            	                                        });
        	                            	                                    gasPrice
        	                            	                            gasLimit: 420000,
        	                            	                    let tx = await Manager.mintNewPosition(functionData, {
        	                            	                const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                            	            const gasPrice = await ethers.provider.getGasPrice()
        	                            	        //call the function with max values of both（and pool)
        	                            	    const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                            	await transfer(DAI, Manager.address, daiAmount);
        	                            await transfer(WETH, Manager.address, wethAmount);
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
.exit
        	                                                                    await test("0x5a6a898348cCABf6d5d4137c67D4dB02949F3018");
        	                                                                    }
        	                                                                    console.log(tx)
        	                                                                });
        	                                                            gasPrice
        	                                                    gasLimit: 420000,
        	                                            let tx = await Manager.mintNewPosition(functionData, {
        	                                        const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                                    const gasPrice = await ethers.provider.getGasPrice()
        	                                //call the function with max values of both（and pool)
        	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																																}
																																return contract;
																															const contract = await Contract.attach(address);
																														const Contract = await ethers.getContractFactory(name);
																													async function getContract(name, address) {
																													}
																													return interactableContract;
																												const interactableContract = await getContract(name, contract.address);
																											})
																										address: contract.address
																								name,
																						tenderly.verify({
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
.exit
.quit
        	                                                                    await test("0x9AdcE0aF2c8A28D189E380fe4E560102D3A6A71F");
        	                                                                    }
        	                                                                    console.log(tx)
        	                                                                });
        	                                                            gasPrice
        	                                                    gasLimit: 420000,
        	                                            let tx = await Manager.mintNewPosition(functionData, {
        	                                        const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                                    const gasPrice = await ethers.provider.getGasPrice()
        	                                //call the function with max values of both（and pool)
        	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																																}
																																return contract;
																															const contract = await Contract.attach(address);
																														const Contract = await ethers.getContractFactory(name);
																													async function getContract(name, address) {
																													}
																													return interactableContract;
																												const interactableContract = await getContract(name, contract.address);
																											})
																										address: contract.address
																								name,
																						tenderly.verify({
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
.exit
.quit
        	                                                                    await test("0x9361DAf2F91Fb7078256c93203bd3a9DB7E88695");
        	                                                                    }
        	                                                                    console.log(tx)
        	                                                                });
        	                                                            gasPrice
        	                                                    gasLimit: 420000,
        	                                            let tx = await Manager.mintNewPosition(functionData, {
        	                                        const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                                    const gasPrice = await ethers.provider.getGasPrice()
        	                                //call the function with max values of both（and pool)
        	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																																}
																																return contract;
																															const contract = await Contract.attach(address);
																														const Contract = await ethers.getContractFactory(name);
																													async function getContract(name, address) {
																													}
																													return interactableContract;
																												const interactableContract = await getContract(name, contract.address);
																											})
																										address: contract.address
																								name,
																						tenderly.verify({
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
        	                                                                    await test("0x6641752eb82ba265a829fd2fcBdE7933ad1481E5");
        	                                                                    }
        	                                                                    console.log(tx)
        	                                                                });
        	                                                            gasPrice
        	                                                    gasLimit: 420000,
        	                                            let tx = await Manager.mintNewPosition(functionData, {
        	                                        const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                                    const gasPrice = await ethers.provider.getGasPrice()
        	                                //call the function with max values of both（and pool)
        	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
        	                                                                    await test("0x6641752eb82ba265a829fd2fcBdE7933ad1481E5");
        	                                                                    }
        	                                                                    console.log(tx)
        	                                                                });
        	                                                            gasPrice
        	                                                    gasLimit: 420000,
        	                                            let tx = await Manager.mintNewPosition(functionData, {
        	                                        const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                                    const gasPrice = await ethers.provider.getGasPrice()
        	                                //call the function with max values of both（and pool)
        	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                        // await approve(DAI, Manager.address, daiAmount);
        	                    // await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
        	                                                                    await test("0x6641752eb82ba265a829fd2fcBdE7933ad1481E5");
        	                                                                    }
        	                                                                    console.log(tx)
        	                                                                });
        	                                                            gasPrice
        	                                                    gasLimit: 210000,
        	                                            let tx = await Manager.mintNewPosition(functionData, {
        	                                        const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                                    const gasPrice = await ethers.provider.getGasPrice()
        	                                //call the function with max values of both（and pool)
        	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
provider
ethers.provider.getHistory()
await ethers.provider.getHistory(signer.address)
let signer = await ethers.getSigner()
        	                                                                        await test("0x6641752eb82ba265a829fd2fcBdE7933ad1481E5");
        	                                                                        }
        	                                                                        console.log(tx)
        	                                                                    });
        	                                                                gasPrice
        	                                                        gasLimit: 210000,
        	                                                let tx = await Manager.callStatic.mintNewPosition(functionData, {
        	                                            console.log(functionData)
        	                                        const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                                    const gasPrice = await ethers.provider.getGasPrice()
        	                                //call the function with max values of both（and pool)
        	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                        await approve(DAI, Manager.address, daiAmount);
        	                    await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																																}
																																return contract;
																															const contract = await Contract.attach(address);
																														const Contract = await ethers.getContractFactory(name);
																													async function getContract(name, address) {
																													}
																													return interactableContract;
																												const interactableContract = await getContract(name, contract.address);
																											})
																										address: contract.address
																								name,
																						tenderly.verify({
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
network
let sdf = await deployedContract()
let manager = await deployedContract()
																																}
																																return contract;
																															const contract = await Contract.attach(address);
																														const Contract = await ethers.getContractFactory(name);
																													async function getContract(name, address) {
																													}
																													return interactableContract;
																												const interactableContract = await getContract(name, contract.address);
																											})
																										address: contract.address
																								name,
																						tenderly.verify({
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployContract.js
        	                                                                        test("0x9361DAf2F91Fb7078256c93203bd3a9DB7E88695");
        	                                                                        }
        	                                                                        console.log(tx)
        	                                                                    });
        	                                                                gasPrice
        	                                                        gasLimit: 210000,
        	                                                let tx = await Manager.callStatic.mintNewPosition(functionData, {
        	                                            console.log(functionData)
        	                                        const functionData = [wethAmount, daiAmount, WETH_DAI_POOL]
        	                                    const gasPrice = await ethers.provider.getGasPrice()
        	                                //call the function with max values of both（and pool)
        	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
        	                        // await approve(DAI, Manager.address, daiAmount);
        	                    // await approve(WETH, Manager.address, wethAmount)
        	                //approve both tokens
        	        const daiAmount = ethers.utils.parseUnits("1", 18);
        	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
        	Manager = await Manager.attach(contractAddr);
        let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/deployContract.js
.exit
.quit
    	                                                                await test("0x9361DAf2F91Fb7078256c93203bd3a9DB7E88695");
    	                                                                }
    	                                                                console.log(tx)
    	                                                            });
    	                                                        gasPrice
    	                                                gasLimit: 210000,
    	                                        let tx = await Manager.callStatic.mintNewPosition([wethAmount, daiAmount, WETH_DAI_POOL], {
    	                                    const gasPrice = await ethers.provider.getGasPrice()
    	                                //call the function with max values of both（and pool)
    	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
    	                        await approve(DAI, Manager.address, daiAmount);
    	                    await approve(WETH, Manager.address, wethAmount)
    	                //approve both tokens
    	        const daiAmount = ethers.utils.parseUnits("1", 18);
    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
    	Manager = await Manager.attach(contractAddr);
    let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/deployContract.js
.exit
    	                                                                await test("0x6641752eb82ba265a829fd2fcBdE7933ad1481E5");
    	                                                                }
    	                                                                console.log(tx)
    	                                                            });
    	                                                        gasPrice
    	                                                gasLimit: 210000,
    	                                        let tx = await Manager.callStatic.mintNewPosition([wethAmount, daiAmount, WETH_DAI_POOL], {
    	                                    const gasPrice = await ethers.provider.getGasPrice()
    	                                //call the function with max values of both（and pool)
    	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
    	                        await approve(DAI, Manager.address, daiAmount);
    	                    await approve(WETH, Manager.address, wethAmount)
    	                //approve both tokens
    	        const daiAmount = ethers.utils.parseUnits("1", 18);
    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
    	Manager = await Manager.attach(contractAddr);
    let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
manager = await deployedContract()
    	                                                                await test("0x6641752eb82ba265a829fd2fcBdE7933ad1481E5");
    	                                                                }
    	                                                                console.log(tx)
    	                                                            });
    	                                                        gasPrice
    	                                                gasLimit: 210000,
    	                                        let tx = await Manager.callStatic.mintNewPosition([wethAmount, daiAmount, WETH_DAI_POOL], {
    	                                    const gasPrice = await ethers.provider.getGasPrice()
    	                                //call the function with max values of both（and pool)
    	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
    	                        await approve(DAI, Manager.address, daiAmount);
    	                    await approve(WETH, Manager.address, wethAmount)
    	                //approve both tokens
    	        const daiAmount = ethers.utils.parseUnits("1", 18);
    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
    	Manager = await Manager.attach(contractAddr);
    let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
 .load scripts/testManager.js
    	                                                                await test("0x6641752eb82ba265a829fd2fcBdE7933ad1481E5");
    	                                                                }
    	                                                                console.log(tx)
    	                                                            });
    	                                                        gasPrice
    	                                                gasLimit: 210000,
    	                                        let tx = await Manager.callStatic.mintNewPosition([wethAmount, daiAmount, WETH_DAI_POOL], {
    	                                    const gasPrice = await ethers.provider.getGasPrice()
    	                                //call the function with max values of both（and pool)
    	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
    	                        await approve(DAI, Manager.address, daiAmount);
    	                    await approve(WETH, Manager.address, wethAmount)
    	                //approve both tokens
    	        const daiAmount = ethers.utils.parseUnits("1", 18);
    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
    	Manager = await Manager.attach(contractAddr);
    let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
let manager = await deployedContract()
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WETH
																factory,
														NonfungiblePositionManager,
												const contract = await Contract.deploy(
											console.log(`Deploying ${name}...`);
										const Contract = await ethers.getContractFactory(name);
									// We get the contract to deploy
								"0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
						const NonfungiblePositionManager =
					const WETH = "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";
				const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
			const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
		// const routerAddress = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/deployContract.js
    	                                                                await test("0x1fC287091D36fdC2c78f37d1b4a5b46D13358ffa");
    	                                                                }
    	                                                                console.log(tx)
    	                                                            });
    	                                                        gasPrice
    	                                                gasLimit: 210000,
    	                                        let tx = await Manager.callStatic.mintNewPosition([wethAmount, daiAmount, WETH_DAI_POOL], {
    	                                    const gasPrice = await ethers.provider.getGasPrice()
    	                                //call the function with max values of both（and pool)
    	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
    	                        await approve(DAI, Manager.address, daiAmount);
    	                    await approve(WETH, Manager.address, wethAmount)
    	                //approve both tokens
    	        const daiAmount = ethers.utils.parseUnits("1", 18);
    	    const wethAmount = ethers.utils.parseUnits("0.01", 18);
    	Manager = await Manager.attach(contractAddr);
    let Manager = await ethers.getContractFactory("PositionManager");
async function test(contractAddr) {
// const { ethers } = require("hardhat");
.load scripts/testManager.js
await daiContract.balanceOf(signer.address)
daiContract.functions
signer.provider)
ERC20ABI,
DAI,
let daiContract = new ethers.Contract(
ERC20ABI,
DAI
let daiContract = new ethers.Contract(
													await test("0x6eED5f2904b53A7111ea0d8feeF26A4b64CF78d3");
													}
													console.log(tx);
												});
											gasLimit: 210000,
									gasPrice,
							const tx = await Swapper.swapExactInputSingle(daiAmount, {
						const gasPrice = await ethers.provider.getGasPrice();
					await approve(DAI, Swapper.address, daiAmount);
				const daiAmount = ethers.utils.parseUnits("1", 18);
			const approveAmount = ethers.utils.parseUnits("2", 18);
		Swapper = await Swapper.attach(contractAddr);
	let Swapper = await ethers.getContractFactory("Swapper");
async function test(contractAddr) {
.load scripts/testSwapper.js
let signer = await ethers.getSigner()
await signer.getBalance()
let signer = await ethers.getSigner()
signer
await signer
DAI
													await test("0x6eED5f2904b53A7111ea0d8feeF26A4b64CF78d3");
													}
													console.log(tx);
												});
											gasLimit: 210000,
									gasPrice,
							const tx = await Swapper.swapExactInputSingle(daiAmount, {
						const gasPrice = await ethers.provider.getGasPrice();
					await approve(DAI, Swapper.address, daiAmount);
				const daiAmount = ethers.utils.parseUnits("1", 18);
			const approveAmount = ethers.utils.parseUnits("2", 18);
		Swapper = await Swapper.attach(contractAddr);
	let Swapper = await ethers.getContractFactory("Swapper");
async function test(contractAddr) {
.load scripts/testSwapper.js
hre.ethers.provider
													await test("0x6eED5f2904b53A7111ea0d8feeF26A4b64CF78d3");
													}
													console.log(tx);
												});
											gasLimit: 210000,
									gasPrice,
							const tx = await Swapper.swapExactInputSingle(daiAmount, {
						const gasPrice = await ethers.provider.getGasPrice();
					await approve(DAI, Swapper.address, daiAmount);
				const daiAmount = ethers.utils.parseUnits("1", 18);
			const approveAmount = ethers.utils.parseUnits("2", 18);
		Swapper = await Swapper.attach(contractAddr);
	let Swapper = await ethers.getContractFactory("Swapper");
async function test(contractAddr) {
.load scripts/testSwapper.js
.load scripts/testSwaper.js
.exit
DAI
												await test("0x6eED5f2904b53A7111ea0d8feeF26A4b64CF78d3");
												}
												console.log(tx);
											});
										gasLimit: 210000,
								gasPrice,
						const tx = await Swapper.swapExactInputSingle(daiAmount, {
					const gasPrice = await ethers.provider.getGasPrice();
				await approve(DAI, Swapper.address, daiAmount);
			const daiAmount = ethers.utils.parseUnits("1", 18);
		Swapper = await Swapper.attach(contractAddr);
	let Swapper = await ethers.getContractFactory("Swapper");
async function test(contractAddr) {
.load scripts/testSwapper.js
												await test("0x6eED5f2904b53A7111ea0d8feeF26A4b64CF78d3");
												}
												console.log(tx);
											});
										gasLimit: 210000,
								gasPrice,
						const tx = await Swapper.callStatic.swapExactInputSingle(daiAmount, {
					const gasPrice = await ethers.provider.getGasPrice();
				await approve(DAI, Swapper.address, daiAmount);
			const daiAmount = ethers.utils.parseUnits("1", 18);
		Swapper = await Swapper.attach(contractAddr);
	let Swapper = await ethers.getContractFactory("Swapper");
async function test(contractAddr) {
.load scripts/testSwapper.js
				    								await test("0x6eED5f2904b53A7111ea0d8feeF26A4b64CF78d3");
				    								}
				    								console.log(tx);
				    							});
				    						gasLimit: 210000,
				    				gasPrice,
				    		const tx = await Swapper.callStatic.swapExactInputSingle(daiAmount, {
				    	const gasPrice = await ethers.provider.getGasPrice();
				    // await approve()
				await approve(DAI, Swapper.address, daiAmount);
			const daiAmount = ethers.utils.parseUnits("1", 18);
		Swapper = await Swapper.attach(contractAddr);
	let Swapper = await ethers.getContractFactory("Swapper");
async function test(contractAddr) {
.load scripts/testSwapper.js
				    								await test("0x6eED5f2904b53A7111ea0d8feeF26A4b64CF78d3");
				    								}
				    								console.log(tx);
				    							});
				    						gasLimit: 210000,
				    				gasPrice,
				    		const tx = await Swapper.callStatic.swapExactInputSingle(daiAmount, {
				    	const gasPrice = await ethers.provider.getGasPrice();
				    // await approve()
				await approve(DAI, Swapper.address, daiAmount);
			const daiAmount = ethers.utils.parseUnits("1", 18);pper = await Swapper.attach(contractAddr);ait ethers.getContractFactory("Swapper");                           });
    	                                                        gasPrice
    	                                                gasLimit: 210000,
    	                                        let tx = await Manager.callStatic.mintNewPosition([wethAmount, daiAmount, WETH_DAI_POOL, 100], {
    	                                    const gasPrice = await ethers.provider.getGasPrice()
    	                                //call the function with max values of both（and pool)
    	                            const WETH_DAI_POOL = "0x6baD0f9a89Ca403bb91d253D385CeC1A2b6eca97";
    	                        // await approve(DAI, Manager.address, daiAmount);