.exit
let manager = await deployedContract()
																									}
																									return contract;
																								const contract = await Contract.attach(address);
																							const Contract = await ethers.getContractFactory(name);
																						async function getContract(name, address) {
																						}
																						return interactableContract;
																					const interactableContract = await getContract(name, contract.address);
																				console.log(name, "deployed to:", contract.address);
																			await contract.deployed();
																		);
																	WMATIC
															factory,
													SwapRouter,
											NonfungiblePositionManager,
									const contract = await Contract.deploy(
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
// const { tenderly } = require("hardhat");
.load scripts/deployManager.js
.exit
																																																																																																													        	        						            										    					await test();
																																																																																																													        	        						            										    					}
																																																																																																													        	        						            										    					PositionManager.tokenReturn("0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174", "1000")
																																																																																																													        	        						            										    				// console.log({balance0, balance1})
																																																																																																													        	        						            										    			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																													        	        						            										    		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																													        	        						            										    	// await resetTx.wait(2)
																																																																																																													        	        						            										    // console.log(resetTx)
																																																																																																													        	        						            										// console.log({balance0, balance1})
																																																																																																													        	        						            									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																													        	        						            								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																													        	        						            						//MARK: remove the liquidity
																																																																																																													        	        						            					console.log({balance0, balance1})
																																																																																																													        	        						            				balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																													        	        						            			balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																													        	        						            		// await mintTx.wait(1)
																																																																																																													        	        						            	// console.log(mintTx)
																																																																																																													        	        						            // });
																																																																																																													        	        						        //     gasPrice: gasPrice
																																																																																																													        	        						    //     gasLimit: 720000,
																																																																																																													        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																													        	        					//tell argent to mint
																																																																																																													        	        				// console.log({balance0, balance1})
																																																																																																													        	        			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																													        	        		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																													        	        	// await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																													        	        // await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																													        	    // await approve(WETH, PositionManager.address, wethAmount);
																																																																																																													        	// await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																													    // const wethAmount = balance1.div("2")
																																																																																																													// const usdcAmount = balance0.div("2")
																																																																																																												// //send funds to contract
																																																																																																											// console.log(balance0.div("2"), balance1.div("2"))
																																																																																																										// console.log({balance0, balance1})
																																																																																																									// let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																								// let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																							let PositionManager = await getContract("PositionManager", "0x940bce4c370af3294cC2348D2fa24ED5b3e27b41")
																																																																																																						// let PositionManager = await deployedContract()
																																																																																																					// init contract
																																																																																																				];
																																																																																																			1,
																																																																																																	immutables.tickSpacing,
																																																																																															immutables.token1,
																																																																																													immutables.token0,
																																																																																											immutables.fee,
																																																																																									poolAddress,
																																																																																							0,
																																																																																					0,
																																																																																			const mintData = [
																																																																																		const gasPrice = await ethers.provider.getGasPrice()
																																																																																	const immutables = await getPoolImmutables(poolAddress)
																																																																																const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																															const signer = await ethers.getSigner()
																																																																														const testPrivateKey = "0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d"
																																																																													async function test() {
																																																																													}
																																																																													return balance
																																																																												let balance = await tokenContract.balanceOf(callerAddr)
																																																																											const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																										const signer = await ethers.getSigner()
																																																																								async function getBalance(tokenAddr, callerAddr) {
																																																																								}
																																																																								return immutables;
																																																																							};
																																																																						maxLiquidityPerTick,
																																																																				tickSpacing,
																																																																		fee,
																																																																token1,
																																																														token0,
																																																												factory,
																																																										const immutables = {
																																																									]);
																																																							poolContract.maxLiquidityPerTick(),
																																																				poolContract.tickSpacing(),
																																																	poolContract.fee(),
																																														poolContract.token1(),
																																											poolContract.token0(),
																																								poolContract.factory(),
																																					await Promise.all([
																																			const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																		);
																																	ethers.provider
																															IUniswapV3PoolABI,
																													poolAddress,
																											const poolContract = new ethers.Contract(
																										async function getPoolImmutables(poolAddress) {
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
.exit
																																																																																																															        	        						            										    					await test();
																																																																																																															        	        						            										    					}
																																																																																																															        	        						            										    					PositionManager.tokenReturn("0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174", "1000")
																																																																																																															        	        						            										    				// console.log({balance0, balance1})
																																																																																																															        	        						            										    			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																															        	        						            										    		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																															        	        						            										    	// await resetTx.wait(2)
																																																																																																															        	        						            										    // console.log(resetTx)
																																																																																																															        	        						            										// console.log({balance0, balance1})
																																																																																																															        	        						            									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																															        	        						            								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																															        	        						            						//MARK: remove the liquidity
																																																																																																															        	        						            					console.log({balance0, balance1})
																																																																																																															        	        						            				balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																															        	        						            			balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																															        	        						            		// await mintTx.wait(1)
																																																																																																															        	        						            	// console.log(mintTx)
																																																																																																															        	        						            // });
																																																																																																															        	        						        //     gasPrice: gasPrice
																																																																																																															        	        						    //     gasLimit: 720000,
																																																																																																															        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																															        	        					//tell argent to mint
																																																																																																															        	        				// console.log({balance0, balance1})
																																																																																																															        	        			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																															        	        		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																															        	        	// await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																															        	        // await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																															        	    // await approve(WETH, PositionManager.address, wethAmount);
																																																																																																															        	// await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																															    // const wethAmount = balance1.div("2")
																																																																																																															// const usdcAmount = balance0.div("2")
																																																																																																														// //send funds to contract
																																																																																																													// console.log(balance0.div("2"), balance1.div("2"))
																																																																																																												// console.log({balance0, balance1})
																																																																																																											// let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																										// let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																									let PositionManager = await getContract("PositionManager", "0x940bce4c370af3294cC2348D2fa24ED5b3e27b41")
																																																																																																								// let PositionManager = await deployedContract()
																																																																																																							// init contract
																																																																																																						];
																																																																																																					1,
																																																																																																			immutables.tickSpacing,
																																																																																																	immutables.token1,
																																																																																															immutables.token0,
																																																																																													immutables.fee,
																																																																																											poolAddress,
																																																																																									0,
																																																																																							0,
																																																																																					const mintData = [
																																																																																				const gasPrice = await ethers.provider.getGasPrice()
																																																																																			const immutables = await getPoolImmutables(poolAddress)
																																																																																		const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																	console.log(signer.address)
																																																																																signer.connect(ethers.provider)
																																																																															const signer = new ethers.Wallet(testPrivateKey)
																																																																														const testPrivateKey = "0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d"
																																																																													async function test() {
																																																																													}
																																																																													return balance
																																																																												let balance = await tokenContract.balanceOf(callerAddr)
																																																																											const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																										const signer = await ethers.getSigner()
																																																																								async function getBalance(tokenAddr, callerAddr) {
																																																																								}
																																																																								return immutables;
																																																																							};
																																																																						maxLiquidityPerTick,
																																																																				tickSpacing,
																																																																		fee,
																																																																token1,
																																																														token0,
																																																												factory,
																																																										const immutables = {
																																																									]);
																																																							poolContract.maxLiquidityPerTick(),
																																																				poolContract.tickSpacing(),
																																																	poolContract.fee(),
																																														poolContract.token1(),
																																											poolContract.token0(),
																																								poolContract.factory(),
																																					await Promise.all([
																																			const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																		);
																																	ethers.provider
																															IUniswapV3PoolABI,
																													poolAddress,
																											const poolContract = new ethers.Contract(
																										async function getPoolImmutables(poolAddress) {
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
})
params: ["0x70997970C51812dc3A010C7d01b50e0d17dc79C8"]
method: "hardhat_impersonateAccount",
network.provider.request({
																																																																																																															        	        						            										    					await test();
																																																																																																															        	        						            										    					}
																																																																																																															        	        						            										    					PositionManager.tokenReturn("0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174", "1000")
																																																																																																															        	        						            										    				// console.log({balance0, balance1})
																																																																																																															        	        						            										    			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																															        	        						            										    		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																															        	        						            										    	// await resetTx.wait(2)
																																																																																																															        	        						            										    // console.log(resetTx)
																																																																																																															        	        						            										// console.log({balance0, balance1})
																																																																																																															        	        						            									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																															        	        						            								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																															        	        						            						//MARK: remove the liquidity
																																																																																																															        	        						            					console.log({balance0, balance1})
																																																																																																															        	        						            				balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																															        	        						            			balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																															        	        						            		// await mintTx.wait(1)
																																																																																																															        	        						            	// console.log(mintTx)
																																																																																																															        	        						            // });
																																																																																																															        	        						        //     gasPrice: gasPrice
																																																																																																															        	        						    //     gasLimit: 720000,
																																																																																																															        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																															        	        					//tell argent to mint
																																																																																																															        	        				// console.log({balance0, balance1})
																																																																																																															        	        			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																															        	        		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																															        	        	// await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																															        	        // await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																															        	    // await approve(WETH, PositionManager.address, wethAmount);
																																																																																																															        	// await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																															    // const wethAmount = balance1.div("2")
																																																																																																															// const usdcAmount = balance0.div("2")
																																																																																																														// //send funds to contract
																																																																																																													// console.log(balance0.div("2"), balance1.div("2"))
																																																																																																												// console.log({balance0, balance1})
																																																																																																											// let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																										// let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																									let PositionManager = await getContract("PositionManager", "0x940bce4c370af3294cC2348D2fa24ED5b3e27b41")
																																																																																																								// let PositionManager = await deployedContract()
																																																																																																							// init contract
																																																																																																						];
																																																																																																					1,
																																																																																																			immutables.tickSpacing,
																																																																																																	immutables.token1,
																																																																																															immutables.token0,
																																																																																													immutables.fee,
																																																																																											poolAddress,
																																																																																									0,
																																																																																							0,
																																																																																					const mintData = [
																																																																																				const gasPrice = await ethers.provider.getGasPrice()
																																																																																			const immutables = await getPoolImmutables(poolAddress)
																																																																																		const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																	console.log(signer.address)
																																																																																signer.connect(ethers.provider)
																																																																															const signer = new ethers.Wallet(testPrivateKey)
																																																																														const testPrivateKey = "0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d"
																																																																													async function test() {
																																																																													}
																																																																													return balance
																																																																												let balance = await tokenContract.balanceOf(callerAddr)
																																																																											const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																										const signer = await ethers.getSigner()
																																																																								async function getBalance(tokenAddr, callerAddr) {
																																																																								}
																																																																								return immutables;
																																																																							};
																																																																						maxLiquidityPerTick,
																																																																				tickSpacing,
																																																																		fee,
																																																																token1,
																																																														token0,
																																																												factory,
																																																										const immutables = {
																																																									]);
																																																							poolContract.maxLiquidityPerTick(),
																																																				poolContract.tickSpacing(),
																																																	poolContract.fee(),
																																														poolContract.token1(),
																																											poolContract.token0(),
																																								poolContract.factory(),
																																					await Promise.all([
																																			const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																		);
																																	ethers.provider
																															IUniswapV3PoolABI,
																													poolAddress,
																											const poolContract = new ethers.Contract(
																										async function getPoolImmutables(poolAddress) {
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
signer.address
signerWallet
																																																																																																														        	        						            										    					await test();
																																																																																																														        	        						            										    					}
																																																																																																														        	        						            										    					PositionManager.tokenReturn("0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174", "1000")
																																																																																																														        	        						            										    				// console.log({balance0, balance1})
																																																																																																														        	        						            										    			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																														        	        						            										    		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																														        	        						            										    	// await resetTx.wait(2)
																																																																																																														        	        						            										    // console.log(resetTx)
																																																																																																														        	        						            										// console.log({balance0, balance1})
																																																																																																														        	        						            									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																														        	        						            								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																														        	        						            						//MARK: remove the liquidity
																																																																																																														        	        						            					console.log({balance0, balance1})
																																																																																																														        	        						            				balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																														        	        						            			balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																														        	        						            		// await mintTx.wait(1)
																																																																																																														        	        						            	// console.log(mintTx)
																																																																																																														        	        						            // });
																																																																																																														        	        						        //     gasPrice: gasPrice
																																																																																																														        	        						    //     gasLimit: 720000,
																																																																																																														        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																														        	        					//tell argent to mint
																																																																																																														        	        				// console.log({balance0, balance1})
																																																																																																														        	        			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																														        	        		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																														        	        	// await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																														        	        // await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																														        	    // await approve(WETH, PositionManager.address, wethAmount);
																																																																																																														        	// await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																														    // const wethAmount = balance1.div("2")
																																																																																																														// const usdcAmount = balance0.div("2")
																																																																																																													// //send funds to contract
																																																																																																												// console.log(balance0.div("2"), balance1.div("2"))
																																																																																																											// console.log({balance0, balance1})
																																																																																																										// let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																									// let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																								let PositionManager = await getContract("PositionManager", "0x940bce4c370af3294cC2348D2fa24ED5b3e27b41")
																																																																																																							// let PositionManager = await deployedContract()
																																																																																																						// init contract
																																																																																																					];
																																																																																																				1,
																																																																																																		immutables.tickSpacing,
																																																																																																immutables.token1,
																																																																																														immutables.token0,
																																																																																												immutables.fee,
																																																																																										poolAddress,
																																																																																								0,
																																																																																						0,
																																																																																				const mintData = [
																																																																																			const gasPrice = await ethers.provider.getGasPrice()
																																																																																		const immutables = await getPoolImmutables(poolAddress)
																																																																																	const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																signer.connect(ethers.provider)
																																																																															const signer = new ethers.Wallet(testPrivateKey)
																																																																														const testPrivateKey = "0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d"
																																																																													async function test() {
																																																																													}
																																																																													return balance
																																																																												let balance = await tokenContract.balanceOf(callerAddr)
																																																																											const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																										const signer = await ethers.getSigner()
																																																																								async function getBalance(tokenAddr, callerAddr) {
																																																																								}
																																																																								return immutables;
																																																																							};
																																																																						maxLiquidityPerTick,
																																																																				tickSpacing,
																																																																		fee,
																																																																token1,
																																																														token0,
																																																												factory,
																																																										const immutables = {
																																																									]);
																																																							poolContract.maxLiquidityPerTick(),
																																																				poolContract.tickSpacing(),
																																																	poolContract.fee(),
																																														poolContract.token1(),
																																											poolContract.token0(),
																																								poolContract.factory(),
																																					await Promise.all([
																																			const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																		);
																																	ethers.provider
																															IUniswapV3PoolABI,
																													poolAddress,
																											const poolContract = new ethers.Contract(
																										async function getPoolImmutables(poolAddress) {
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
.load scrips/testArgent.js
																																																																																																														        	        						            										    					await test();
																																																																																																														        	        						            										    					}
																																																																																																														        	        						            										    					PositionManager.tokenReturn("0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174", "1000")
																																																																																																														        	        						            										    				// console.log({balance0, balance1})
																																																																																																														        	        						            										    			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																														        	        						            										    		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																														        	        						            										    	// await resetTx.wait(2)
																																																																																																														        	        						            										    // console.log(resetTx)
																																																																																																														        	        						            										// console.log({balance0, balance1})
																																																																																																														        	        						            									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																														        	        						            								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																														        	        						            						//MARK: remove the liquidity
																																																																																																														        	        						            					console.log({balance0, balance1})
																																																																																																														        	        						            				balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																														        	        						            			balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																														        	        						            		// await mintTx.wait(1)
																																																																																																														        	        						            	// console.log(mintTx)
																																																																																																														        	        						            // });
																																																																																																														        	        						        //     gasPrice: gasPrice
																																																																																																														        	        						    //     gasLimit: 720000,
																																																																																																														        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																														        	        					//tell argent to mint
																																																																																																														        	        				// console.log({balance0, balance1})
																																																																																																														        	        			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																														        	        		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																														        	        	// await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																														        	        // await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																														        	    // await approve(WETH, PositionManager.address, wethAmount);
																																																																																																														        	// await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																														    // const wethAmount = balance1.div("2")
																																																																																																														// const usdcAmount = balance0.div("2")
																																																																																																													// //send funds to contract
																																																																																																												// console.log(balance0.div("2"), balance1.div("2"))
																																																																																																											// console.log({balance0, balance1})
																																																																																																										// let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																									// let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																								let PositionManager = await getContract("PositionManager", "0x940bce4c370af3294cC2348D2fa24ED5b3e27b41")
																																																																																																							// let PositionManager = await deployedContract()
																																																																																																						// init contract
																																																																																																					];
																																																																																																				1,
																																																																																																		immutables.tickSpacing,
																																																																																																immutables.token1,
																																																																																														immutables.token0,
																																																																																												immutables.fee,
																																																																																										poolAddress,
																																																																																								0,
																																																																																						0,
																																																																																				const mintData = [
																																																																																			const gasPrice = await ethers.provider.getGasPrice()
																																																																																		const immutables = await getPoolImmutables(poolAddress)
																																																																																	const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																signer.connect(ethers.provider)
																																																																															const signer = new Wallet(testPrivateKey)
																																																																														const testPrivateKey = "0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d"
																																																																													async function test() {
																																																																													}
																																																																													return balance
																																																																												let balance = await tokenContract.balanceOf(callerAddr)
																																																																											const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																										const signer = await ethers.getSigner()
																																																																								async function getBalance(tokenAddr, callerAddr) {
																																																																								}
																																																																								return immutables;
																																																																							};
																																																																						maxLiquidityPerTick,
																																																																				tickSpacing,
																																																																		fee,
																																																																token1,
																																																														token0,
																																																												factory,
																																																										const immutables = {
																																																									]);
																																																							poolContract.maxLiquidityPerTick(),
																																																				poolContract.tickSpacing(),
																																																	poolContract.fee(),
																																														poolContract.token1(),
																																											poolContract.token0(),
																																								poolContract.factory(),
																																					await Promise.all([
																																			const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																		);
																																	ethers.provider
																															IUniswapV3PoolABI,
																													poolAddress,
																											const poolContract = new ethers.Contract(
																										async function getPoolImmutables(poolAddress) {
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
ethers.provider
ethesrs.provider
.editor
wallet = wallet.connect(provider);
let wallet = new Wallet("0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d");
.editor
let wallet = new Wallet(process.env.PRIVATE_KEY);
.editor
let signerWallet = await ethers.getSigner()
})
params: ["0xdf3e18d64bc6a983f673ab319ccae4f1a57c7097"],
method: "hardhat_impersonateAccount",
network.provider.request({
provider
																																																																																																												        	        						            																					                        				await test();
																																																																																																												        	        						            																					                        				}
																																																																																																												        	        						            																					                        				// console.log({balance0, balance1})
																																																																																																												        	        						            																					                        			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																												        	        						            																					                        		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																												        	        						            																					                        	// await resetTx.wait(2)
																																																																																																												        	        						            																					                        console.log(resetTx)
																																																																																																												        	        						            																					                    });
																																																																																																												        	        						            																					                gasPrice
																																																																																																												        	        						            																					        gasLimit: 720000,
																																																																																																												        	        						            																					let resetTx = await PositionManager.removeLiquidity(removeData, {
																																																																																																												        	        						            																				]
																																																																																																												        	        						            																			immutables.token1,
																																																																																																												        	        						            																	immutables.token0,
																																																																																																												        	        						            															"270379365663503",
																																																																																																												        	        						            													"98568", 
																																																																																																												        	        						            											const removeData = [
																																																																																																												        	        						            										// console.log({balance0, balance1})
																																																																																																												        	        						            									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																												        	        						            								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																												        	        						            						//MARK: remove the liquidity
																																																																																																												        	        						            					console.log({balance0, balance1})
																																																																																																												        	        						            				balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																												        	        						            			balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																												        	        						            		// await mintTx.wait(1)
																																																																																																												        	        						            	// console.log(mintTx)
																																																																																																												        	        						            // });
																																																																																																												        	        						        //     gasPrice: gasPrice
																																																																																																												        	        						    //     gasLimit: 720000,
																																																																																																												        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																												        	        					//tell argent to mint
																																																																																																												        	        				console.log({balance0, balance1})
																																																																																																												        	        			balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																												        	        		balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																												        	        	await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																												        	        await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																												        	    await approve(WETH, PositionManager.address, wethAmount);
																																																																																																												        	await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																												    const wethAmount = balance1.div("2")
																																																																																																												const usdcAmount = balance0.div("2")
																																																																																																											//send funds to contract
																																																																																																										console.log(balance0.div("2"), balance1.div("2"))
																																																																																																									console.log({balance0, balance1})
																																																																																																								let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																							let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																						// let PositionManager = await getContract("PositionManager", "0x9E0AE48fd233D85dbac16ca91b2f1c3072a6368f")
																																																																																																					let PositionManager = await deployedContract()
																																																																																																				// init contract
																																																																																																			];
																																																																																																		1,
																																																																																																immutables.tickSpacing,
																																																																																														immutables.token1,
																																																																																												immutables.token0,
																																																																																										immutables.fee,
																																																																																								poolAddress,
																																																																																						0,
																																																																																				0,
																																																																																		const mintData = [
																																																																																	const gasPrice = await ethers.provider.getGasPrice()
																																																																																const immutables = await getPoolImmutables(poolAddress)
																																																																															const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																														const signer = await ethers.getSigner()
																																																																													async function test() {
																																																																													}
																																																																													return balance
																																																																												let balance = await tokenContract.balanceOf(callerAddr)
																																																																											const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																										const signer = await ethers.getSigner()
																																																																								async function getBalance(tokenAddr, callerAddr) {
																																																																								}
																																																																								return immutables;
																																																																							};
																																																																						maxLiquidityPerTick,
																																																																				tickSpacing,
																																																																		fee,
																																																																token1,
																																																														token0,
																																																												factory,
																																																										const immutables = {
																																																									]);
																																																							poolContract.maxLiquidityPerTick(),
																																																				poolContract.tickSpacing(),
																																																	poolContract.fee(),
																																														poolContract.token1(),
																																											poolContract.token0(),
																																								poolContract.factory(),
																																					await Promise.all([
																																			const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																		);
																																	ethers.provider
																															IUniswapV3PoolABI,
																													poolAddress,
																											const poolContract = new ethers.Contract(
																										async function getPoolImmutables(poolAddress) {
																										}
																										return contract;
																									const contract = await Contract.attach(address);
																								const Contract = await ethers.getContractFactory(name);
																							async function getContract(name, address) {
																							}
																							return interactableContract;
																						const interactableContract = await getContract(name, contract.address);
																					console.log(name, "deployed to:", contract.address);
																				await contract.deployed();
																			);
																		WMATIC
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
																																																																																																																				        	        						            																					                        				await test();
																																																																																																																				        	        						            																					                        				}
																																																																																																																				        	        						            																					                        				// console.log({balance0, balance1})
																																																																																																																				        	        						            																					                        			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            																					                        		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            																					                        	// await resetTx.wait(2)
																																																																																																																				        	        						            																					                        console.log(resetTx)
																																																																																																																				        	        						            																					                    });
																																																																																																																				        	        						            																					                gasPrice
																																																																																																																				        	        						            																					        gasLimit: 720000,
																																																																																																																				        	        						            																					let resetTx = await PositionManager.removeLiquidity(removeData, {
																																																																																																																				        	        						            																				]
																																																																																																																				        	        						            																			immutables.token1,
																																																																																																																				        	        						            																	immutables.token0,
																																																																																																																				        	        						            															"270379365663503",
																																																																																																																				        	        						            													"98568", 
																																																																																																																				        	        						            											const removeData = [
																																																																																																																				        	        						            										// console.log({balance0, balance1})
																																																																																																																				        	        						            									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            						//MARK: remove the liquidity
																																																																																																																				        	        						            					console.log({balance0, balance1})
																																																																																																																				        	        						            				balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            			balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            		// await mintTx.wait(1)
																																																																																																																				        	        						            	// console.log(mintTx)
																																																																																																																				        	        						            // });
																																																																																																																				        	        						        //     gasPrice: gasPrice
																																																																																																																				        	        						    //     gasLimit: 720000,
																																																																																																																				        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																																				        	        					//tell argent to mint
																																																																																																																				        	        				console.log({balance0, balance1})
																																																																																																																				        	        			balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        		balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        	await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	        await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																																				        	    await approve(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																																				    const wethAmount = balance1.div("2")
																																																																																																																				const usdcAmount = balance0.div("2")
																																																																																																																			//send funds to contract
																																																																																																																		console.log(balance0.div("2"), balance1.div("2"))
																																																																																																																	console.log({balance0, balance1})
																																																																																																																let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																															let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																														// let PositionManager = await getContract("PositionManager", "0x9E0AE48fd233D85dbac16ca91b2f1c3072a6368f")
																																																																																																													let PositionManager = await deployedContract()
																																																																																																												// init contract
																																																																																																											];
																																																																																																										1,
																																																																																																								immutables.tickSpacing,
																																																																																																						immutables.token1,
																																																																																																				immutables.token0,
																																																																																																		immutables.fee,
																																																																																																poolAddress,
																																																																																														0,
																																																																																												0,
																																																																																										const mintData = [
																																																																																									const gasPrice = await ethers.provider.getGasPrice()
																																																																																								const immutables = await getPoolImmutables(poolAddress)
																																																																																							const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																						const signer = await ethers.getSigner()
																																																																																					async function test() {
																																																																																					}
																																																																																					return balance
																																																																																				let balance = await tokenContract.balanceOf(callerAddr)
																																																																																			const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																																		const signer = await ethers.getSigner()
																																																																																async function getBalance(tokenAddr, callerAddr) {
																																																																																}
																																																																																return immutables;
																																																																															};
																																																																														maxLiquidityPerTick,
																																																																												tickSpacing,
																																																																										fee,
																																																																								token1,
																																																																						token0,
																																																																				factory,
																																																																		const immutables = {
																																																																	]);
																																																															poolContract.maxLiquidityPerTick(),
																																																												poolContract.tickSpacing(),
																																																									poolContract.fee(),
																																																						poolContract.token1(),
																																																			poolContract.token0(),
																																																poolContract.factory(),
																																													await Promise.all([
																																											const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																										);
																																									ethers.provider
																																							IUniswapV3PoolABI,
																																					poolAddress,
																																			const poolContract = new ethers.Contract(
																																		async function getPoolImmutables(poolAddress) {
																																		}
																																		return contract;
																																	const contract = await Contract.attach(address);
																																const Contract = await ethers.getContractFactory(name);
																															async function getContract(name, address) {
																															}
																															return interactableContract;
																														const interactableContract = await getContract(name, contract.address);
																													console.log(name, "deployed to:", contract.address);
																												await contract.deployed();
																											);
																										}
																								gasPrice: gasPrice
																					nonce: 1900,
																		WMATIC, {
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
																																																																																																																				        	        						            																					                        				await test();
																																																																																																																				        	        						            																					                        				}
																																																																																																																				        	        						            																					                        				// console.log({balance0, balance1})
																																																																																																																				        	        						            																					                        			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            																					                        		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            																					                        	// await resetTx.wait(2)
																																																																																																																				        	        						            																					                        console.log(resetTx)
																																																																																																																				        	        						            																					                    });
																																																																																																																				        	        						            																					                gasPrice
																																																																																																																				        	        						            																					        gasLimit: 720000,
																																																																																																																				        	        						            																					let resetTx = await PositionManager.removeLiquidity(removeData, {
																																																																																																																				        	        						            																				]
																																																																																																																				        	        						            																			immutables.token1,
																																																																																																																				        	        						            																	immutables.token0,
																																																																																																																				        	        						            															"270379365663503",
																																																																																																																				        	        						            													"98568", 
																																																																																																																				        	        						            											const removeData = [
																																																																																																																				        	        						            										// console.log({balance0, balance1})
																																																																																																																				        	        						            									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            						//MARK: remove the liquidity
																																																																																																																				        	        						            					console.log({balance0, balance1})
																																																																																																																				        	        						            				balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            			balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            		// await mintTx.wait(1)
																																																																																																																				        	        						            	// console.log(mintTx)
																																																																																																																				        	        						            // });
																																																																																																																				        	        						        //     gasPrice: gasPrice
																																																																																																																				        	        						    //     gasLimit: 720000,
																																																																																																																				        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																																				        	        					//tell argent to mint
																																																																																																																				        	        				console.log({balance0, balance1})
																																																																																																																				        	        			balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        		balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        	await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	        await transfer(USDC, PositionManager.address, usdcAmount);
																																																																																																																				        	    await approve(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	await approve(USDC, PositionManager.address, usdcAmount);
																																																																																																																				    const wethAmount = balance1.div("2")
																																																																																																																				const usdcAmount = balance0.div("2")
																																																																																																																			//send funds to contract
																																																																																																																		console.log(balance0.div("2"), balance1.div("2"))
																																																																																																																	console.log({balance0, balance1})
																																																																																																																let balance1 = await getBalance(immutables.token1, signer.address)
																																																																																																															let balance0 = await getBalance(immutables.token0, signer.address)
																																																																																																														// let PositionManager = await getContract("PositionManager", "0x9E0AE48fd233D85dbac16ca91b2f1c3072a6368f")
																																																																																																													let PositionManager = await deployedContract()
																																																																																																												// init contract
																																																																																																											];
																																																																																																										1,
																																																																																																								immutables.tickSpacing,
																																																																																																						immutables.token1,
																																																																																																				immutables.token0,
																																																																																																		immutables.fee,
																																																																																																poolAddress,
																																																																																														0,
																																																																																												0,
																																																																																										const mintData = [
																																																																																									const gasPrice = await ethers.provider.getGasPrice()
																																																																																								const immutables = await getPoolImmutables(poolAddress)
																																																																																							const poolAddress = "0x0e44cEb592AcFC5D3F09D996302eB4C499ff8c10";
																																																																																						const signer = await ethers.getSigner()
																																																																																					async function test() {
																																																																																					}
																																																																																					return balance
																																																																																				let balance = await tokenContract.balanceOf(callerAddr)
																																																																																			const tokenContract = new ethers.Contract(tokenAddr, ERC20ABI, signer);
																																																																																		const signer = await ethers.getSigner()
																																																																																async function getBalance(tokenAddr, callerAddr) {
																																																																																}
																																																																																return immutables;
																																																																															};
																																																																														maxLiquidityPerTick,
																																																																												tickSpacing,
																																																																										fee,
																																																																								token1,
																																																																						token0,
																																																																				factory,
																																																																		const immutables = {
																																																																	]);
																																																															poolContract.maxLiquidityPerTick(),
																																																												poolContract.tickSpacing(),
																																																									poolContract.fee(),
																																																						poolContract.token1(),
																																																			poolContract.token0(),
																																																poolContract.factory(),
																																													await Promise.all([
																																											const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =
																																										);
																																									ethers.provider
																																							IUniswapV3PoolABI,
																																					poolAddress,
																																			const poolContract = new ethers.Contract(
																																		async function getPoolImmutables(poolAddress) {
																																		}
																																		return contract;
																																	const contract = await Contract.attach(address);
																																const Contract = await ethers.getContractFactory(name);
																															async function getContract(name, address) {
																															}
																															return interactableContract;
																														const interactableContract = await getContract(name, contract.address);
																													console.log(name, "deployed to:", contract.address);
																												await contract.deployed();
																											);
																										}
																								gasPrice: gasPrice
																					nonce: 1900,
																		WMATIC, {
																factory,
														SwapRouter,
												NonfungiblePositionManager,
										const contract = await Contract.deploy(
									const gasPrice = await ethers.provider.getGasPrice()
								console.log(`Deploying ${name}...`);
							const Contract = await ethers.getContractFactory(name);
						// We get the contract to deploy
					const WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270";
				const factory = "0x1F98431c8aD98523631AE4a59f267346ea31F984";
			const SwapRouter = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
		const NonfungiblePositionManager = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
	const name = "PositionManager";
async function deployedContract() {//DON'T USE IF ALREADY DEPLOYED
.load scripts/testArgent.js
.exit
																																																																																																																				        	        						            																					                        				await test();
																																																																																																																				        	        						            																					                        				}
																																																																																																																				        	        						            																					                        				// console.log({balance0, balance1})
																																																																																																																				        	        						            																					                        			// balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            																					                        		// balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            																					                        	// await resetTx.wait(2)
																																																																																																																				        	        						            																					                        console.log(resetTx)																																																																																																															        	        						            																					                    });																																																																														        	        						            																					                gasPrice																																																																																																				        	        						            											const removeData = [
																																																																																																																				        	        						            										// console.log({balance0, balance1})
																																																																																																																				        	        						            									// let balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            								// let balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            						//MARK: remove the liquidity
																																																																																																																				        	        						            					console.log({balance0, balance1})
																																																																																																																				        	        						            				balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        						            			balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        						            		// await mintTx.wait(1)
																																																																																																																				        	        						            	// console.log(mintTx)
																																																																																																																				        	        						            // });
																																																																																																																				        	        						        //     gasPrice: gasPrice
																																																																																																																				        	        						    //     gasLimit: 720000,
																																																																																																																				        	        						// let mintTx = await PositionManager.mint(mintData, {
																																																																																																																				        	        					//tell argent to mint
																																																																																																																				        	        				console.log({balance0, balance1})
																																																																																																																				        	        			balance1 = await getBalance(immutables.token1, PositionManager.address)
																																																																																																																				        	        		balance0 = await getBalance(immutables.token0, PositionManager.address)
																																																																																																																				        	        	await transfer(WETH, PositionManager.address, wethAmount);
																																																																																																																				        	        await transfer(USDC, PositionManager.address, usdcAmount);																																																																																																															        	    await approve(WETH, PositionManager.address, wethAmount);